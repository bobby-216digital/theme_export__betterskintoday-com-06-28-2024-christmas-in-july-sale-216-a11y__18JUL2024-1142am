{%- comment -%}
{
  "pack_name": "Comparison slider with text",
  "pack_author": "Design Packs"
}
{%- endcomment -%}


{% comment %} Blocks: out of order (not within loop) {% endcomment %}
{% assign slider_block = section.blocks | where: 'type', 'slider_block' %}
{% assign feature_products = section.blocks | where: 'type', 'feature_product' %}

{%- comment -%} Images: all placeholders {%- endcomment -%}
{%- assign placeholder_image_id = 'oRWRlTgBrPo' -%}

{%- comment -%} Images: check image crop aspect ratio {%- endcomment -%}
{%- if section.settings.image_crop == 'none' or section.settings.image_crop == 'match_text_box' -%}
  {%- assign image_crop_width = section.settings.image.width | default: '1000' -%}
  {%- assign image_crop_height = section.settings.image.height | default: '1200' -%}
{%- else -%}
  {%- assign image_crop_width = section.settings.image_crop | split: ':' | first | times: 1000 -%}
  {%- assign image_crop_height = section.settings.image_crop | split: ':' | last | times: 1000 -%}
{%- endif -%}

{% comment %} Images: responsive image widths {% endcomment %}
{%- assign widths = '180, 360, 540, 720, 900, 1080, 1296, 1512, 1728, 1950, 2100, 2260, 2450, 2700, 3000, 3350, 3750, 4100' -%}

{%- comment -%} Layout: has user entered measurement value into max-width field? {%- endcomment -%}
{%- if section.settings.max_width contains 'px' or section.settings.max_width contains '%' -%}
  {%- assign max_width = section.settings.max_width -%}
{%- else -%}
  {%- assign max_width = section.settings.max_width | append: 'px' -%}
{%- endif -%}

{%- comment -%} Text: custom font_picker values {%- endcomment -%}
{%- capture font_settings_list -%}
{{ section.settings.main_font | font_face: font_display: 'swap' }}~
{{ section.settings.main_font | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}~
{{ section.settings.main_font | font_modify: 'style', 'italic' | font_face: font_display: 'swap' }}~
{{ section.settings.main_font | font_modify: 'style', 'italic' | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_modify: 'style', 'italic' | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_modify: 'style', 'italic' | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}
{%- endcapture -%}
{%- assign font_array = font_settings_list | split: '~' -%}

{%- capture minify -%}
{%- comment -%} CSS {%- endcomment -%}
<style>
{%- if slider_block.size > 0 -%}
  .flickity-enabled{position:relative}.flickity-enabled:focus{outline:0;box-shadow: none;}.flickity-viewport{overflow:hidden;position:relative;height:100%}.flickity-slider{position:absolute;width:100%;height:100%}.flickity-enabled.is-draggable{-webkit-tap-highlight-color:transparent;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.flickity-enabled.is-draggable .flickity-viewport{cursor:move;cursor:-webkit-grab;cursor:grab}.flickity-enabled.is-draggable .flickity-viewport.is-pointer-down{cursor:-webkit-grabbing;cursor:grabbing}.flickity-button{position:absolute;background:hsla(0,0%,100%,.75);border:none;color:#333}.flickity-button:hover{background:#fff;cursor:pointer}.flickity-button:focus{outline:0;box-shadow:0 0 0 5px #19f}.flickity-button:active{opacity:.6}.flickity-button:disabled{opacity:.3;cursor:auto;pointer-events:none}.flickity-button-icon{fill:currentColor}.flickity-prev-next-button{top:50%;width:44px;height:44px;border-radius:50%;transform:translateY(-50%)}.flickity-prev-next-button.previous{left:10px}.flickity-prev-next-button.next{right:10px}.flickity-rtl .flickity-prev-next-button.previous{left:auto;right:10px}.flickity-rtl .flickity-prev-next-button.next{right:auto;left:10px}.flickity-prev-next-button .flickity-button-icon{position:absolute;left:20%;top:20%;width:60%;height:60%}.flickity-page-dots{position:absolute;width:100%;bottom:-25px;padding:0;margin:0;list-style:none;text-align:center;line-height:1}.flickity-rtl .flickity-page-dots{direction:rtl}.flickity-page-dots .dot{display:inline-block;width:10px;height:10px;margin:0 8px;background:#333;border-radius:50%;opacity:.25;cursor:pointer}.flickity-page-dots .dot.is-selected{opacity:1}
{%- endif -%}

{%- if section.settings.override_theme_font != blank -%}
  {%- for font in font_array -%}
    {%- unless font contains 'error' -%}{{ font }}{%- endunless -%}
  {%- endfor -%}
  #DP--{{ section.id }} {
    --main-font: {{ section.settings.main_font.family }}, {{ section.settings.main_font.fallback_families }};
    --main-font-weight: {{ section.settings.main_font.weight }};
    --main-font-style: {{ section.settings.main_font.style }};
    --heading-font: {{ section.settings.heading_font.family }}, {{ section.settings.heading_font.fallback_families }};
    --heading-font-weight: {{ section.settings.heading_font.weight }};
    --heading-font-style: {{ section.settings.heading_font.style }};
  }
{%- endif -%}

#DP--{{ section.id }} {
  margin-top: {{ section.settings.outer_margin }}px;
  margin-bottom: {{ section.settings.outer_margin }}px;
}

#DP--{{ section.id }} .dsgn-pck__sizer {
  padding-top: {{ section.settings.inner_padding }}px;
  padding-bottom: {{ section.settings.inner_padding }}px;
  width: {{ section.settings.base_width }}%;
  max-width: {{ max_width }};
}

#DP--{{ section.id }} .dsgn-pck__background {
  background: {{ section.settings.background_color }};
}

#DP--{{ section.id }} .dsgn-pck__background-image {
  position: absolute;
  object-fit: cover;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: -1;
}

#DP--{{ section.id }} .dsgn-pck__grid--main {
  {% comment %} grid-template-columns: 1fr minmax(250px, {{ section.settings.text_width }}%); {% endcomment %}
  {% comment %} grid-template-columns: 1fr 2fr; {% endcomment %}
	grid-template-columns: minmax(250px, 45%) minmax(250px, 55%);
}

#DP--{{ section.id }} .dsgn-pck__text p:last-of-type {
  margin-bottom: 1.2rem;
}

{%- if section.settings.image_crop == 'match_text_box' -%}
  #DP--{{ section.id }} .dsgn-pck__image__wrapper--main {
    height: 100%;
    overflow: hidden;
  }
{%- endif -%}

{% comment %} COMPARISON SLIDER {% endcomment %}
{% comment %} #DP--{{ section.id }} .dsgn-pck__compare {
  position: relative;
  aspect-ratio: {{ section.settings.left_image.width | default: 1200 }} / {{ section.settings.left_image.height | default: 800 }};
} {% endcomment %}

#DP--{{ section.id }} .dsgn-pck__comparison__slider {
  position: absolute;
  z-index: 1;
  width: 50px;
  height: 50px;
  cursor: grab;
  display: block !important;
  position: relative;
  top: calc(50% - 25px);
  left: calc(50% - 25px);
}

#DP--{{ section.id }} .dsgn-pck__comparison__slider:active {
  cursor: grabbing;
}

#DP--{{ section.id }} .dsgn-pck__comparison__slider-handle {
  background: {{ section.settings.handle_color }};
  border: 4px solid {{ section.settings.border_color }};
  border-radius: 50%;
  transition: border-color 0.2s;
  position: absolute;
  height: 100%;
  width: 100%;
  top: 0;
  left: 0;
  display: flex;
}

#DP--{{ section.id }} .dsgn-pck__comparison__slider-handle svg {
  width: 50%;
  height: 50%;
  margin: auto;
}

#DP--{{ section.id }} .dsgn-pck__comparison__slider-handle svg path {
  fill: {{ section.settings.drag_color }};
}

#DP--{{ section.id }} .dsgn-pck__comparison__slider img {
  position: absolute;
  height: 100%;
  width: 100%;
  top: 0;
  {% comment %} left: -2px; {% endcomment %}
	left: 0;
  object-fit: cover;
}

#DP--{{ section.id }} .dsgn-pck__comparison__image {
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  height: 100%;
  width: 100%;
  overflow: hidden;
  user-select: none;
  pointer-events: none;
}

#DP--{{ section.id }} .dsgn-pck__comparison__overlay {
  border-right: 2px solid {{ section.settings.border_color }};
}

#DP--{{ section.id }} .dsgn-pck__comparison__overlay:after {
  display: block;
  content: '';
  width: 2px;
  height: 100%;
  position: absolute;
  top: 0;
  right: 0;
  background: {{ section.settings.border_color }};
}

#DP--{{ section.id }} .dsgn-pck__comparison__image img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  max-width: none;
}

#DP--{{ section.id }} .dsgn-pck__comparison__overlay img {
  height: 100%;
  width: auto;
}



#DP--{{ section.id }} .dsgn-pck__caption {
  position: absolute;
  display: block;
  color: {{ section.settings.caption_text }};
  left: 0;
  top: 0;
  width: max-content;
  max-width: 200px;
  margin: 10px;
  padding: 0.3em 0.8em;
  background-color: {{ section.settings.caption_background }};
  line-height: calc(3px + 2ex + 3px);
  font-size: calc(var(--dp-g-body-size, var(--dp-body-size, 18px)) * {{ section.settings.text_size | times: 0.008 }});
  {%- if section.settings.override_theme_font != blank -%}
  font-family: var(--main-font);
  font-weight: var(--main-font-weight);
  font-style: var(--main-font-style);
  {%- endif -%}
}

#DP--{{ section.id }} .dsgn-pck__caption--right {
  right: 0;
  left: auto;
}

{% comment %} END COMPARISON SLIDER {% endcomment %}

#DP--{{ section.id }} .dsgn-pck__content-wrapper {
  padding: 20px;
  display: flex;
  background: {{ section.settings.text_background_color }};

}

#DP--{{ section.id }} .dsgn-pck__content {
  padding: 20px;
  display: flex;
	width: calc(100% - 150px);
	margin-right: 30px;
  justify-content: center;
  align-items: center;
  {%- if section.settings.override_theme_font != blank -%}
  font-family: var(--main-font);
  font-weight: var(--main-font-weight);
  font-style: var(--main-font-style);
  {%- endif -%}
}

#DP--{{ section.id }} .dsgn-pck__inner-content {
  width: 100%;
  max-width: min(600px, 100%);
  margin: auto;
}

#DP--{{ section.id }} .dsgn-pck__product-button--container{
  max-width: 370px;

}

#DP--{{ section.id }} .dsgn-pck__product-button--wrapper{
  display: flex;
	flex-wrap: wrap;
	justify-content: center;
	gap: 10px;

}

#DP--{{ section.id }} .dsgn-pck__product-button {
  width: calc(50% - 5px);
	max-width: 180px;
	color: {{ section.settings.button_label_color_product }};
  background: {{ section.settings.button_background_color_product }};
	border: 1px solid {{ section.settings.button_label_color_product }};
	transition: 0.3s;
	padding: 10px;
	cursor: pointer;
}


#DP--{{ section.id }} .dsgn-pck__product-button.dsgn-pck__active, #DP--{{ section.id }} .dsgn-pck__product-button:hover {
  color: {{ section.settings.button_background_color_product }};
  background: {{ section.settings.button_label_color_product }};
	border: 1px solid {{ section.settings.button_label_color_product }};
}

#DP--{{ section.id }} .dsgn-pck__compare-wrapper {
  position: relative
}

#DP--{{ section.id }} .dsgn-pck__compare {
  opacity: 0;
	position: absolute;
	top: 0;
	width: 100%;
	pointer-events: none;
	transition: 0.3s opacity;
}

#DP--{{ section.id }} .dsgn-pck__compare.dsgn-pck__active {
  opacity: 1;
	pointer-events: revert;
}

#DP--{{ section.id }} .dsgn-pck__image-wrapper {
  display: none;
}

#DP--{{ section.id }} .dsgn-pck__image-wrapper.dsgn-pck__active {
  display: block;
}

#DP--{{ section.id }} .dsgn-pck__product-description {
  display: none;
}

#DP--{{ section.id }} .dsgn-pck__product-description.dsgn-pck__active {
  display: block;
}

#DP--{{ section.id }} .dsgn-pck__feature-products  {
	align-self: center;
}

#DP--{{ section.id }} .dsgn-pck__feature-products img {
	height: unset;
	width: 150px;
	max-width: 150px;
}

{% comment %} Block styling {% endcomment %}
#DP--{{ section.id }} .dsgn-pck__rte h1,
#DP--{{ section.id }} .dsgn-pck__rte h2 {
  line-height: calc(3px + 2ex + 3px);
  color: {{ section.settings.text_color }};
  {%- if section.settings.override_theme_font != blank -%}
		font-family: var(--heading-font);
		font-weight: var(--heading-font-weight);
		font-style: var(--heading-font-style);
	{%- endif -%}
}

#DP--{{ section.id }} .dsgn-pck__rte h3, 
#DP--{{ section.id }} .dsgn-pck__rte h4, 
#DP--{{ section.id }} .dsgn-pck__rte h5, 
#DP--{{ section.id }} .dsgn-pck__rte h6 {
  line-height: calc(3px + 2ex + 3px);
  color: {{ section.settings.text_color }};
  {%- if section.settings.override_theme_font != blank -%}
		font-family: var(--main-font);
		font-weight: var(--main-font-weight);
		font-style: var(--main-font-style);
	{%- endif -%}
}

#DP--{{ section.id }} .dsgn-pck__rte p,
#DP--{{ section.id }} .dsgn-pck__rte ul {
  line-height: calc(3px + 2ex + 3px);
  color: {{ section.settings.text_color }};
  font-size: calc(var(--dp-g-body-size, var(--dp-body-size, 18px)) * {{ section.settings.text_size | times: 0.01 }});
  {%- if section.settings.override_theme_font != blank -%}
  font-family: var(--main-font);
  font-weight: var(--main-font-weight);
  font-style: var(--main-font-style);
  {%- endif -%}
}

#DP--{{ section.id }} .dsgn-pck__small-text p,
#DP--{{ section.id }} .dsgn-pck__small-text ul {
  font-size: calc(var(--dp-g-body-size, var(--dp-body-size, 18px)) * {{ section.settings.text_size | times: 0.008 }});
}

{%- if section.settings.text_alignment == 'center' -%}
  #DP--{{ section.id }} .dsgn-pck__rte ul {
    display: table;
    margin: 0 auto;
    text-align: left;
  }
{%- elsif section.settings.text_alignment == 'right' -%}
  #DP--{{ section.id }} .dsgn-pck__rte ul {
    display: table;
    margin-left: auto;
    text-align: left;
  }
{%- endif -%}

#DP--{{ section.id }} .dsgn-pck__block {
  color: {{ section.settings.text_color }};
}

#DP--{{ section.id }} .dsgn-pck__block + .dsgn-pck__block {
  margin-top: 15px;
}
{% comment %} End block styling {% endcomment %}

/* Animation */
{%- if section.settings.animation != 'none' -%}
  #DP--{{ section.id }}.dsgn-pck__animation-applied [style*="--dsgn-pck-animate"] {
    animation-name: dsgn-pck__animation--{{ section.settings.animation }};
  }
{%- else -%}
  #DP--{{ section.id }} [style*="--dsgn-pck-animate"] {
    opacity: 1;
  }
{% endif %}

{%- if section.settings.custom_css != blank -%}
  {%- assign custom_section_declarations = section.settings.custom_css | split: '}' -%}
  {%- for declaration in custom_section_declarations -%}
    {%- if declaration contains '{' -%}
      #DP--{{ section.id }} {{ declaration }} }
    {%- endif -%}
  {%- endfor -%}
{%- endif -%}

/* Landscape phone to portrait tablet */
@media (max-width: 767px) {
  #DP--{{ section.id }} .dsgn-pck__grid--main {
    grid-template-columns: repeat(1, minmax(250px, 1fr));
  }
}

/* Landscape phones and down */
@media (max-width: 480px) {
  #DP--{{ section.id }} {
    margin-top: {{ section.settings.outer_margin | times: 0.75 | round: 0 }}px;
    margin-bottom: {{ section.settings.outer_margin | times: 0.75 | round: 0 }}px;
  }

  #DP--{{ section.id }} .dsgn-pck__sizer {
    min-width: 70%;
    padding-top: {{ section.settings.inner_padding | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.inner_padding | times: 0.75 | round: 0 }}px;
  }

	#DP--{{ section.id }} .dsgn-pck__content-wrapper {
    flex-wrap: wrap;
	}

	#DP--{{ section.id }} .dsgn-pck__feature-products {
    margin: 0 auto;
	}

	#DP--{{ section.id }} .dsgn-pck__content {
		padding: 0;
		display: flex;
		flex-wrap: wrap;
		width: 100%;
		margin-right: 0;
	}

  #DP--{{ section.id }} .dsgn-pck__inner-content {
    max-width: min(400px, 100%);
  }

  {%- if section.settings.mobile_custom_css != blank -%}
    {%- assign mobile_custom_declarations = section.settings.mobile_custom_css | split: '}' -%}
    {%- for declaration in mobile_custom_declarations -%}
      {%- if declaration contains '{' -%}
        #DP--{{ section.id }} {{ declaration }} }
      {%- endif -%}
    {%- endfor -%}
  {%- endif -%}
}
</style>

{%- comment -%} HTML {%- endcomment -%}
<section id="DP--{{ section.id }}" class="DP--{{ section.id }} dsgn-pck__main dsgn-pck__section">
  {%- if section.settings.anchor_id != blank -%}
    <div id="{{ section.settings.anchor_id | remove: '#' }}" class="dsgn-pck__anchor-id" style="height: 0; overflow: hidden;"></div>
  {%- endif -%}
  <div class="dsgn-pck__background">
    {%- if section.settings.show_background_image -%}
      {%- if section.settings.background_image != blank -%}
        {{ section.settings.background_image | image_url: width: section.settings.background_image.width | image_tag:  widths: widths, sizes: '100vw', class: 'dsgn-pck__background-image' }}
      {%- else -%}
        <img src="https://cdn.shopify.com/s/files/1/0577/7673/4361/files/{{ placeholder_image_id }}_1600x.jpg"
            class="dsgn-pck__background-image"
            alt=""
            loading="lazy"
            class="dsgn-pck__background-image"
            width="1600"
            height="1000">
      {%- endif -%}
    {%- endif -%}
    <div class="dsgn-pck__sizer
                dsgn-pck__grid
                dsgn-pck__grid--main
                {% if section.settings.image_position == 'right' -%}
                  dsgn-pck__grid-reverse
                {%- endif -%}">
			<div class="dsgn-pck__compare-wrapper">
				{%- comment %}<locksmith:367e>{% endcomment -%}
				  {%- assign locksmith_2eb9_forloop__size = 0 %}{%- for block in feature_products -%}{% capture var %}{% render 'locksmith-variables', scope: 'subject', subject: block, variable: 'transparent' %}{% endcapture %}{% if var == 'true' %}{% assign locksmith_2eb9_forloop__size = locksmith_2eb9_forloop__size | plus: 1 %}{% endif %}{% endfor %}{% assign locksmith_2eb9_forloop__index = nil -%}
				{%- comment %}</locksmith:367e>{% endcomment -%}
				{%- for block in feature_products -%}	
				  {%- comment %}<locksmith:4faf>{% endcomment -%}
				    {%- capture var %}{% render 'locksmith-variables', scope: 'subject', subject: block, variable: 'transparent' %}{% endcapture %}{% if var == "true" %}{% if locksmith_2eb9_forloop__index == nil %}{% assign locksmith_2eb9_forloop__index = 1 %}{% assign locksmith_2eb9_forloop__index0 = 0 %}{% else %}{% assign locksmith_2eb9_forloop__index = locksmith_2eb9_forloop__index | plus: 1 %}{% assign locksmith_2eb9_forloop__index0 = locksmith_2eb9_forloop__index0 | plus: 1 %}{% endif %}{% if locksmith_2eb9_forloop__index == 1 %}{% assign locksmith_2eb9_forloop__first = true %}{% else %}{% assign locksmith_2eb9_forloop__first = false %}{% endif %}{% if locksmith_2eb9_forloop__index == locksmith_2eb9_forloop__size %}{% assign locksmith_2eb9_forloop__last = true %}{% else %}{% assign locksmith_2eb9_forloop__last = false %}{% endif %}{% assign locksmith_2eb9_forloop__rindex = locksmith_2eb9_forloop__size | minus: locksmith_2eb9_forloop__index | minus: 1 %}{% assign locksmith_2eb9_forloop__rindex0 = locksmith_2eb9_forloop__size | minus: locksmith_2eb9_forloop__index0 | minus: 1 %}{% else %}{% continue %}{% endif -%}
				  {%- comment %}</locksmith:4faf>{% endcomment -%}	
				  {% assign this_product = all_products[block.settings.product.handle] %}		
				<div id="DP--{{ block.id }}" class="dsgn-pck__compare {% if locksmith_2eb9_forloop__first %} 	dsgn-pck__active{% endif %}" data-compare-product-id="{{this_product.id}}">
					<div class="dsgn-pck__compare-inner">
						<style>
							{% if locksmith_2eb9_forloop__first %}
								#DP--{{ section.id }} .dsgn-pck__compare-wrapper {
									aspect-ratio: {{ block.settings.left_image.width | default: 1200 }} / {{ block.settings.left_image.height | default: 800 }};
								}
							{% endif %} 
							#DP--{{ block.id }}.dsgn-pck__compare {
								{% comment %} position: relative; {% endcomment %}
								aspect-ratio: {{ block.settings.left_image.width | default: 1200 }} / {{ block.settings.left_image.height | default: 800 }};
								{% if block.settings.left_image == blank %}
									aspect-ratio: {{ block.settings.right_image.width | default: 1200 }} / {{ block.settings.right_image.height | default: 800 }};
								{% endif %}
							}
						</style>
						<div class="dsgn-pck__comparison__image dsgn-pck__comparison__image--right dsgn-pck__caption--right">
							{%- if block.settings.right_image -%}
								{%- capture sizes -%}
									{{ section.settings.base_width }}vw
								{%- endcapture -%}
								{{ block.settings.right_image | image_url: width: 5000 | image_tag:  widths: widths, sizes: sizes }}
							{%- else -%}
								<img src="https://cdn.shopify.com/s/files/1/0577/7673/4361/files/{{ placeholder_image_id }}_1200x.jpg"
									alt=""
									loading="lazy"
									width="1200"
									height="800">
							{%- endif -%}
							{%- if block.settings.right_caption != blank -%}
								<span class="dsgn-pck__caption dsgn-pck__caption--right">{{ block.settings.right_caption }}</span>
							{%- endif -%}
						</div>
						{%if block.settings.left_image != blank %}
							<div class="dsgn-pck__comparison__slider">
							{%- if section.settings.handle_image -%}
								{{ section.settings.handle_image | image_url: width: 800 | image_tag: loading: 'lazy' }}
							{%- else -%}
								<div class="dsgn-pck__comparison__slider-handle">
									<svg viewBox="0 0 20 20" ><path d="M6 0a1 1 0 0 0-1 1v18a1 1 0 1 0 2 0v-18a1 1 0 0 0-1-1zm8 0a1 1 0 0 0-1 1v18a1 1 0 1 0 2 0v-18a1 1 0 0 0-1-1z"></path></svg>
								</div>
							{%- endif -%}
							</div>
						
							<div class="dsgn-pck__comparison__image dsgn-pck__comparison__overlay dsgn-pck__comparison__image--left">
								{%- if block.settings.left_image -%}
									{%- capture sizes -%}
										{{ section.settings.base_width }}vw
									{%- endcapture -%}
									{{ block.settings.left_image | image_url: width: 5000 | image_tag:  widths: widths, sizes: sizes }}
								{%- endif -%}
								{%- if block.settings.left_caption != blank -%}
									<span class="dsgn-pck__caption dsgn-pck__caption--left">{{ block.settings.left_caption }}</span>
								{%- endif -%}
							</div>
						{% endif %}
					</div>
				</div>
				{%- endfor  -%}
			</div>
			<div class="dsgn-pck__content-wrapper">
				<!-- Blocks Loop -->
				<div class="dsgn-pck__content dsgn-pck__flex dsgn-pck__justify-{{ section.settings.text_alignment }}" style="--dsgn-pck-animate: 1;">
					<div class="dsgn-pck__inner-content">
						{%- for block in section.blocks -%}
							<div id="DP--{{ block.id }}" class="dsgn-pck__block dsgn-pck__block-id-{{ block.id }} dsgn-pck__block--{{ block.type }} dsgn-pck__block--{{ forloop.index }}" {{ block.shopify_attributes }} style="--dsgn-pck-animate: {{ forloop.index }};">
								{%- case block.type -%}
									{% when 'feature_range' %}
										<style>
										.dsgn-pck__block-id-{{ block.id }} {
											--dot-color: {{ block.settings.dot_color }};
											--line-color: {{ block.settings.line_color }};
											--dot-size: {{ block.settings.dot_size }}px;
											--line-size: {{ block.settings.line_size }}px;
										}

										.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__feature-range {
											display: grid;
											grid-template-columns: 1fr 4fr 1fr;
											gap: 12px;
											align-items: center;
											justify-content: center;
											padding: 2rem 0;
										}

										.dsgn-pck__block-id-{{ block.id }} input[type=range] {
											width: 100%;
											appearance: none;
											background: var(--line-color);
											height: var(--line-size);
											min-height: unset;
											border: none;
										}

										.dsgn-pck__block-id-{{ block.id }} input[type=range]::-webkit-slider-thumb   {
											-webkit-appearance: none;
											height: var(--dot-size);
											width: var(--dot-size);
											border-radius: var(--dot-size);
											background: var(--dot-color);
										}

										.dsgn-pck__block-id-{{ block.id }} input[type=range]::-moz-range-thumb {
											-webkit-appearance: none;
											height: var(--dot-size);
											width: var(--dot-size);
											border-radius: var(--dot-size);
											background: var(--dot-color);
										}

										</style>
										<div class="dsgn-pck__feature-range-container dsgn-pck__justify-{{ section.settings.text_alignment }}">
											<div class="dsgn-pck__feature-range-title">
												<h3 class="dsgn-pck__small-heading">{{ block.settings.title }}</h3>
											</div>
											<div class="dsgn-pck__feature-range">
												<div class="dsgn-pck__text dsgn-pck__rte">
													<p>{{ block.settings.low_range_label }}</p>
												</div>
												<input type="range" aria-hidden="true" disabled="" id="Flavor" readonly="" min="0" max="10"  value="{{ block.settings.level }}">
												<div class="dsgn-pck__text dsgn-pck__rte">
													<p>{{ block.settings.high_range_label }}</p>
												</div>
											</div>
										</div>
									{%- when 'slider_block' -%}
										<style>
											.dsgn-pck__block-id-{{ block.id }} {
												--show-arrows: {{ block.settings.show_arrows | json }};
												--autoplay: {{ block.settings.autoplay | times: 1000 | json }};
												--slider-animation: {%- if block.settings.slider_animation == 'fade' -%}true{%- else -%}false{%- endif -%};
												--page-dots: {{ block.settings.show_dots | json }};
												--draggable: true;
												--free-scroll-friction: {{ '0.075' | json }};
												--selected-attraction: {{ '0.025' | json }};
												--friction: {{ '0.28' | json }};
												--drag-threshold: {{ '3' | json }};
											}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__slider-container {
												display: flex;
											}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__slider-block {
												width: {{ block.settings.image_width }}%;
											}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__slide {
												width: 100%;
											}

											#DP--{{ section.id }} .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__text {
												margin-top: 10px;
												text-align: center;
											}

											#DP--{{ section.id }} .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__text p:last-of-type {
												margin-bottom: 0;
											}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__slide img {
												width: 100%;
												height: auto;
												display: block;
												margin: auto;
											}

											{%- if block.settings.show_dots == true -%}
												.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__slider-container {
													margin-bottom: 30px;
												}

												.dsgn-pck__block-id-{{ block.id }} .flickity-page-dots {
													bottom: -25px;
												}

												.dsgn-pck__block-id-{{ block.id }} .flickity-page-dots li:only-child {
													display: none;
												}

											{%- endif -%}

											{%- if block.settings.show_arrows == true -%}
												.dsgn-pck__block-id-{{ block.id }} .flickity-prev-next-button {
													width: 30px;
													height: 30px;
												}
											{%- endif -%}

											@media (max-width: 480px) {
												.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__slider-block {
													width: {{ block.settings.mobile_image_width }}%;
												}
											}
										</style>
										<div class="dsgn-pck__slider-container dsgn-pck__justify-{{ section.settings.text_alignment }}">
											<div class="dsgn-pck__slider-block">
												{%- assign slider_count = 0 -%}
												{%- for index in (1..4) -%}
													{%- capture image -%}image_{{ forloop.index }}{%- endcapture -%}
													{%- capture text -%}text_{{ forloop.index }}{%- endcapture -%}
													{%- assign link = '' -%}
													{%- if block.settings[text] contains 'href' -%}
														{%- assign link_string = block.settings[text] | split: 'href="' | last -%}
														{%- assign link = link_string | split: '"' | first -%}
													{%- endif -%}
													{%- if block.settings[image] != blank or block.settings[text] != blank -%}
														{%- assign slider_count = slider_count | plus: 1 -%}
														<div class="dsgn-pck__slide">
															{%- if block.settings[link] != blank -%}
																<a href="{{ link }}">
															{%- endif -%}
																{%- capture sizes -%}
																	(max-width: 480px) {{ block.settings.image_width }}, 50vw
																{%- endcapture -%}
																{%- if block.settings[image] != blank -%}
																	{{ block.settings[image] | image_url: width: block.settings[image].width | image_tag:  widths: widths, sizes: sizes }}
																{%- endif -%}
																{%- if block.settings[text] != blank -%}
																	<div class="dsgn-pck__text dsgn-pck__rte">
																		{{ block.settings[text] }}
																	</div>
																{%- endif -%}
															{%- if link != blank -%}
																</a>
															{%- endif -%}
														</div>
													{%- endif -%}
												{%- endfor -%}
												{%- if slider_count == 0 -%}
													<style>
														.dsgn-pck__block-id-{{ block.id }} {
															display: none;
														}
													</style>
												{%- endif -%}
											</div>
										</div>
									{%- when 'collapsible_content' -%}
										{%- comment -%}Icons: SVG URI encoded icons{%- endcomment -%}
										{%- capture closed_icon -%}
											{%- case block.settings.icon_style -%}
												{%- when 'plus_minus' -%}
													url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath d='M24 10h-10v-10h-4v10h-10v4h10v10h4v-10h10z' fill='{{ section.settings.text_color | replace: "#", "%23" }}'/%3E%3C/svg%3E")
												{%- when 'caret' -%}
													url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath d='M0 7.33l2.829-2.83 9.175 9.339 9.167-9.339 2.829 2.83-11.996 12.17z' fill='{{ section.settings.text_color | replace: "#", "%23" }}'/%3E%3C/svg%3E")
												{%- when 'plus_minus_square' -%}
													url("data:image/svg+xml,%3Csvg clip-rule='evenodd' fill-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='m21 3.998c0-.478-.379-1-1-1h-16c-.62 0-1 .519-1 1v16c0 .621.52 1 1 1h16c.478 0 1-.379 1-1zm-16.5.5h15v15h-15zm6.75 6.752h-3.5c-.414 0-.75.336-.75.75s.336.75.75.75h3.5v3.5c0 .414.336.75.75.75s.75-.336.75-.75v-3.5h3.5c.414 0 .75-.336.75-.75s-.336-.75-.75-.75h-3.5v-3.5c0-.414-.336-.75-.75-.75s-.75.336-.75.75z' fill-rule='nonzero' fill='{{ section.settings.text_color | replace: "#", "%23" }}'/%3E%3C/svg%3E")
											{%- endcase -%}
										{%- endcapture -%}

										{%- capture open_icon -%}
											{%- case block.settings.icon_style -%}
												{%- when 'plus_minus' -%}
													url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath d='M0 10h24v4h-24z' fill='{{ section.settings.text_color | replace: "#", "%23" }}'/%3E%3C/svg%3E")
												{%- when 'caret' -%}
													url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath d='M0 16.67l2.829 2.83 9.175-9.339 9.167 9.339 2.829-2.83-11.996-12.17z' fill='{{ section.settings.text_color | replace: "#", "%23" }}'/%3E%3C/svg%3E")
												{%- when 'plus_minus_square' -%}
													url("data:image/svg+xml,%3Csvg clip-rule='evenodd' fill-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='m21 4c0-.478-.379-1-1-1h-16c-.62 0-1 .519-1 1v16c0 .621.52 1 1 1h16c.478 0 1-.379 1-1zm-16.5.5h15v15h-15zm11.75 6.752h-8.5c-.414 0-.75.336-.75.75s.336.75.75.75h8.5c.414 0 .75-.336.75-.75s-.336-.75-.75-.75z' fill-rule='nonzero' fill='{{ section.settings.text_color | replace: "#", "%23" }}'/%3E%3C/svg%3E");
											{%- endcase -%}
										{%- endcapture -%}
										<style>
											#DP--{{ section.id }} .dsgn-pck__block--collapsible_content + .dsgn-pck__block--collapsible_content {
												margin-top: 0;
											}

											#DP--{{ section.id }} .dsgn-pck__block--collapsible_content + .dsgn-pck__block--collapsible_content .dsgn-pck__accordion {
												border-top: 0;
											}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__accordion {
												border-top: thin solid {{ section.settings.text_color }};
												border-bottom: thin solid {{ section.settings.text_color }};
											}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__question {
												position: relative;
												cursor: pointer;
												display: block;
												padding: 10px 25px 10px 0;
												color: {{ section.settings.text_color }};
											}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__small-heading {
												margin: 0;
												font-size: calc(var(--dp-g-small-heading-size, var(--dp-small-heading-size, 24px)) * {{ section.settings.text_size | times: 0.008 }});
												{%- if section.settings.override_theme_font != blank -%}
													font-family: var(--heading-font);
													font-weight: var(--heading-font-weight);
													font-style: var(--heading-font-style);
												{%- endif -%}
											}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__question::-webkit-details-marker {
												display: none;
											}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__accordion[open] > .dsgn-pck__question:after {
												background-image: {{ open_icon }};
											}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__question:after {
												content: '';
												position: absolute;
												top: 50%;
												transform: translateY(-50%);
												right: 0;
												height: 20px;
												width: 20px;
												background-image: {{ closed_icon }};
												background-size: contain;
											}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__answer {
												padding-top: 10px;
												margin-bottom: 0;
											}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__inner-answer {
												padding: 10px;
												padding-top: 0;
											}
										</style>
										<details class="dsgn-pck__accordion dsgn-pck__icon-style-{{ block.settings.icon_style }}" {%- if block.settings.show_open == true -%} open {%- endif -%}>
											<summary class="dsgn-pck__question">
												<h3 class="dsgn-pck__small-heading">{{ block.settings.title }}</h3>
											</summary>
											<div class="dsgn-pck__answer">
												<div class="dsgn-pck__inner-answer dsgn-pck__text dsgn-pck__rte">
													{{ block.settings.text }}
												</div>
											</div>
										</details>
									{%- when 'highlighted_heading' -%}
										<style>
											{%- if block.settings.highlight_enable_custom_font != blank -%}
												{{ block.settings.highlight_custom_font | font_face: font_display: 'swap' }}
												{{ block.settings.highlight_custom_font | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}
												{{ block.settings.highlight_custom_font | font_modify: 'style', 'italic' | font_face: font_display: 'swap' }}
												{{ block.settings.highlight_custom_font | font_modify: 'style', 'italic' | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}
												.dsgn-pck__block-id-{{ block.id }} {
													--highlight-custom-font: {{ block.settings.highlight_custom_font.family }}, {{ block.settings.highlight_custom_font.fallback_families }};
													--highlight-custom-font-weight: {{ block.settings.highlight_custom_font.weight }};
													--highlight-custom-font-style: {{ block.settings.highlight_custom_font.style }};
												}
											{% endif %}

											{%- assign highlight_background_text_color_alpha = block.settings.highlight_background_text_color | color_extract: 'alpha' -%}
											{%- assign highlight_text_color_alpha = block.settings.highlight_text_color | color_extract: 'alpha' -%}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__heading {
												margin: 0;
												line-height: calc(3px + 2ex + 3px);
												color: {{ section.settings.text_color }};
												{%- if block.settings.block_heading_size != blank -%}
													font-size: calc({{ block.settings.block_heading_size }} * {{ section.settings.text_size | times: 0.01 }});
												{%- else -%}
													font-size: calc(var(--dp-g-heading-size, var(--dp-heading-size, 35px)) * {{ section.settings.text_size | times: 0.01 }});
												{%- endif -%}
												{%- if section.settings.override_theme_font != blank -%}
												font-family: var(--heading-font);
												font-weight: var(--heading-font-weight);
												font-style: var(--heading-font-style);
												{%- endif -%}
											}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__heading .dsgn-pck__highlight-wrap {
												position: relative;
												display: inline;
												{%- if block.settings.highlight_heading_size != blank -%}
													font-size: calc({{ block.settings.highlight_heading_size }} * {{ section.settings.text_size | times: 0.01 }});
												{%- else -%}
													font-size: calc(var(--dp-g-heading-size, var(--dp-heading-size, 35px)) * {{ section.settings.text_size | times: 0.01 }});
												{%- endif -%}
												{%- if block.settings.highlight_enable_custom_font -%}
												font-family: var(--highlight-custom-font);
												font-weight: var(--highlight-custom-font-weight);
												font-style: var(--highlight-custom-font-style);
												{%- elsif section.settings.override_theme_font != blank -%}
												font-family: var(--heading-font);
												font-weight: var(--heading-font-weight);
												font-style: var(--heading-font-style);
												{%- endif -%}
												{%- if block.settings.highlight_option == 'background_highlight' -%}
													background: {{ block.settings.highlight_background_color }};
													background-repeat: no-repeat;
													background-position-y: 0px;
													padding: 0 0.2em;
													{%- if highlight_background_text_color_alpha != 0 -%}
														color: {{ block.settings.highlight_background_text_color }};
													{%- endif -%}
												{%- elsif block.settings.highlight_option == 'text_highlight' -%}
													{%- if highlight_text_color_alpha != 0 -%}
														color: {{ block.settings.highlight_text_color }};
													{%- endif -%}
													{%- if block.settings.highlight_text_color contains 'gradient' -%}
													background-image: {{ block.settings.highlight_text_color }};
													-webkit-background-clip: text;
													background-clip: text;
													-webkit-text-fill-color: transparent;
													{%- endif -%}
												{%- endif -%}
											}

											@media (max-width: 480px) {
												.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__heading {
													{%- if block.settings.block_heading_size != blank -%}
														font-size: min({{ block.settings.block_heading_size }}, 50px);
													{%- endif -%}
												}
											}

										</style>
										{%- if block.settings.title != blank -%}
											<{{- block.settings.heading_level }} class="dsgn-pck__heading dsgn-pck__highlight-{{ block.settings.highlight_option }}">
												{{ block.settings.title | replace: '[', '<span class="dsgn-pck__highlight-wrap">' | replace: ']', '</span>' }}
											</{{- block.settings.heading_level -}}>
										{%- endif -%}
									{%- when 'video' -%}
										<style>
											.dsgn-pck__block-id-{{ block.id }} video {
												width: 100%    !important;
												height: auto   !important;
											}
										</style>
										<div class="dsgn-pck__video__wrapper">
											{%- assign video = block.settings.video -%}
											<video width="{{ video.aspect_ratio | times: 100 }}" height="100"
												{% if block.settings.autoplay %}autoplay muted{% endif %} playsinline
												{% if block.settings.loop %}loop{% endif %}
												{% if block.settings.show_controls %}controls{% endif %}
												loading="lazy" poster="{{ video.preview_image | image_url: width: 2800 }}">
												{%- for source in video.sources -%}
													<source src="{{ source.url }}">
												{%- endfor -%}
											</video>
										</div>
									{%- when 'newsletter' -%}
										<style>
											{%- assign button_alpha = block.settings.button_background_color | color_extract: 'alpha' -%}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__form {
												--form-gap: 5px;
												width: 100%;
												display: flex;
												flex-wrap: wrap;
												gap: calc(var(--form-gap) * 2);
											}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__form-text {
												color: inherit;
												font-size: calc(var(--dp-g-body-size, var(--dp-body-size, 18px)) * {{ section.settings.text_size | times: 0.01 }});
											}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__form input {
												margin: unset;
												padding: 0.8em;
												font-size: calc(var(--dp-g-body-size, var(--dp-body-size, 18px)) * {{ section.settings.text_size | times: 0.01 }});
											}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__form input[type="text"],
											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__form input[type="email"] {
												padding: 0.8em;
												background: transparent;
												border: thin solid {{ section.settings.text_color }};
												color: {{ section.settings.text_color }};
												{%- if section.settings.override_theme_font != blank -%}
												font-family: var(--main-font);
												font-weight: var(--main-font-weight);
												font-style: var(--main-font-style);
												{%- endif -%}
											}

											.dsgn-pck__form--{{ block.id }} input {
												width: 100%;
											}

											{%- if block.settings.show_first_name and block.settings.show_last_name -%}
												.dsgn-pck__form--{{ block.id }}-compact .dsgn-pck__newsletter_first-name,
												.dsgn-pck__form--{{ block.id }}-compact .dsgn-pck__newsletter_last-name {
													width: calc(50% - var(--form-gap));
												}
											{%- endif -%}

											.dsgn-pck__form--{{ block.id }}-compact .dsgn-pck__newsletter_email {
												width: calc(70% - var(--form-gap));
											}

											.dsgn-pck__form--{{ block.id }}-compact .dsgn-pck__button {
												width: calc(30% - var(--form-gap));
											}

											.dsgn-pck__block-id-{{ block.id }} input::placeholder {
												opacity: 0.6;
												color: {{ section.settings.text_color }};
												{%- if section.settings.override_theme_font != blank -%}
												font-family: var(--main-font);
												font-weight: var(--main-font-weight);
												font-style: var(--main-font-style);
												{%- endif -%}
											}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__button {
												justify-content: center;
												text-align: center;
												transition: all 0.3s ease-in-out;
												border: thin solid;
												border-radius: {{ block.settings.button_radius }}px;
												color: {{ block.settings.button_label_color }};
												font-size: calc(var(--dp-g-body-size, var(--dp-body-size, 18px)) * {{ section.settings.text_size | times: 0.01 }});
												border-color: {%- if button_alpha != 0 -%}{{ block.settings.button_background_color }}{%- else -%}{{ block.settings.button_label_color }}{%- endif -%};
												background-color: {{ block.settings.button_background_color }};
												{%- if section.settings.override_theme_font != blank -%}
												font-family: var(--main-font);
												font-weight: var(--main-font-weight);
												font-style: var(--main-font-style);
												{%- endif -%}
											}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__button:hover {
												opacity: 1;
												{%- if button_alpha != 0 -%}
												background-color: {{ block.settings.button_background_color | color_darken: 10 }};
												border-color: transparent;
												{%- else -%}
												background-color: {{ block.settings.button_label_color | color_modify: 'alpha', 0.1 }}
												{%- endif -%};
											}
										</style>
										{%- capture form_id -%}dsgn-pck__form-{{ section.id }}{%- endcapture -%}
										{%- form 'customer', id: form_id -%}

											{%- comment -%} Error and success messages for submitted form {%- endcomment -%}
											<div class="dsgn-pck__form-response dsgn-pck__text">
												{%- if form.posted_successfully? -%}
													<p class="dsgn-pck__form-reply--success">{{ 'success' | t }}</p>
												{%- elsif form.errors -%}
													{%- for field in form.errors -%}
														<p class="dsgn-pck__form-reply--error">{{ field }} - {{ form.errors.messages[field] }}</p>
													{%- endfor -%}
												{%- endif -%}
											</div>

											{%- comment -%} Hidden newsletter fields {%- endcomment -%}
											<input type="hidden" name="contact[tags]" value="newsletter"/>
											<input type="hidden" name="challenge" value="false" />

											<div class="dsgn-pck__form dsgn-pck__form--{{ block.id }} dsgn-pck__form--{{ block.id }}-{{ block.settings.layout }}">
												{%- if block.settings.show_first_name -%}
													<label class="dsgn-pck__visually-hidden" for="first-name-{{ block.id }}">{{ block.settings.first_name_label }}</label>
													<input class="dsgn-pck__newsletter_first-name" type="text" name="contact[first_name]" id="first-name-{{ block.id }}" placeholder="{{ block.settings.first_name_label }}" />
												{%- endif -%}
												{%- if block.settings.show_last_name -%}
													<label class="dsgn-pck__visually-hidden" for="last-name-{{ block.id }}">{{ block.settings.last_name_label }}</label>
													<input class="dsgn-pck__newsletter_last-name" type="text" name="contact[last_name]" id="last-name-{{ block.id }}" placeholder="{{ block.settings.last_name_label }}" />
												{%- endif -%}
												<label class="dsgn-pck__visually-hidden" for="email-{{ block.id }}">{{ block.settings.email_label }}</label>
												<input class="dsgn-pck__newsletter_email" type="email" name="contact[email]" required id="email-{{ block.id }}" placeholder="{{ block.settings.email_label }}" />
												<input class="dsgn-pck__button" type="submit" value="{{ block.settings.submit_label }}" />
											</div>

										{%- endform -%}
									{%- when 'list' -%}
										<style>
											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__list {
												margin: 0;
												{%- case block.settings.list_style -%}
													{%- when 'decimal' -%}
														list-style: decimal;
													{%- when 'square' -%}
														list-style: square;
													{%- when 'circle' -%}
														list-style: circle;
													{%- else -%}
														list-style: inherit;
												{%- endcase -%}
											}
										</style>
										{%- assign list = block.settings.text | split: '**' -%}
										<div class="dsgn-pck__list-wrapper dsgn-pck__rte">
											<ul class="dsgn-pck__list dsgn-pck__text-alignment-left">
												{%- for list_item in list -%}
													{%- if forloop.first == false -%}
														<li>{{ list_item }}</li>
													{%- endif -%}
												{%- endfor -%}
											</ul>
										</div>
									{%- when 'icons' -%}
										<style>
											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__icons {
												--flex-gap: {{ block.settings.gap }}px;
												gap: var(--flex-gap);
												flex-wrap: wrap;
											}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__icon {
												--flex-items: {{ 100.00 | divided_by: block.settings.icon_width }};
												text-align: center;
												flex: 0 1 calc((100% / var(--flex-items)) - (((var(--flex-items) - 1) / var(--flex-items)) * var(--flex-gap)));
												width: calc((100% / var(--flex-items)) - (((var(--flex-items) - 1) / var(--flex-items)) * var(--flex-gap)));
											}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__icon a,
											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__icon p {
												color: {{ section.settings.text_color }};
												line-height: 1.2;
												margin: 0;
												text-decoration: none;
												font-size: calc(var(--dp-g-body-size, var(--dp-body-size, 18px)) * {{ section.settings.text_size | times: 0.007 }});
											}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__icon img {
												position: relative;
												width: {{ block.settings.image_size }}%;
												height: auto;
												display: inline-block;
											}

											@media (max-width: 480px) {
												.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__icon {
													--flex-items: {{ 100.00 | divided_by: block.settings.mobile_icon_width }};
												}
											}
										</style>
										<div class="dsgn-pck__flex dsgn-pck__icons {% if block.settings.icon_alignment == 'default' %}dsgn-pck__justify-{{ section.settings.text_alignment }}{% else %}dsgn-pck__justify-{{ block.settings.icon_alignment }}{% endif %}">
											{%- for index in (1..4) -%}
												{%- capture icon -%}icon_{{ forloop.index }}{%- endcapture -%}
												{%- capture text -%}text_{{ forloop.index }}{%- endcapture -%}
												{%- capture link -%}link_{{ forloop.index }}{%- endcapture -%}
												{%- if block.settings[icon] != blank -%}
													<div class="dsgn-pck__flex-item dsgn-pck__icon dsgn-pck__rte">
														{%- if block.settings[link] != blank -%}
															<a href="{{ block.settings[link] }}">
														{%- endif -%}
															{%- capture sizes -%}
																(max-width: 480px) calc(100vw / {{ block.settings.icon_width }}), calc({{ section.settings.text_width | default: 50 }}vw / {{ block.settings.icon_width }})
															{%- endcapture -%}
															{{ block.settings[icon] | image_url: width: block.settings[icon].width | image_tag:  widths: widths, sizes: sizes }}
															{%- if block.settings[text] != blank -%}
																<p class="dsgn-pck__icon-text">
																	{{ block.settings[text] }}
																</p>
															{%- endif -%}
														{%- if block.settings[link] != blank -%}
															</a>
														{%- endif -%}
													</div>
												{%- endif -%}
											{%- endfor -%}
										</div>
									{%- when 'text_columns' -%}
										<style>
											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__columns {
												gap: {{ block.settings.gap }}px;
											}
										</style>
										<div class="dsgn-pck__flex dsgn-pck__columns dsgn-pck__flex--2-per-row dsgn-pck__justify-{{ block.settings.text_alignment }}">
											{%- for index in (1..2) -%}
												{%- capture heading -%}heading_{{ forloop.index }}{%- endcapture -%}
												{%- capture column -%}column_{{ forloop.index }}{%- endcapture -%}
												<div class="dsgn-pck__flex-item">
													{%- if block.settings[heading] != blank -%}
														<h3 class="dsgn-pck__small-heading dsgn-pck__column-heading">{{ block.settings[heading] }}</h3>
													{%- endif -%}
													{%- if block.settings[column] != blank -%}
														<div class="dsgn-pck__rte">
															{{ block.settings[column] }}
														</div>
													{%- endif -%}
											</div>
											{%- endfor -%}
										</div>
									{%- when 'countdown_timer' -%}
										{%- comment -%} Schedule: timezone value {%- endcomment -%}
										{%- assign timezone = block.settings.timezone | split: '~' | first | strip -%}
										<style>
											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__clock-wrap {
												max-width: 450px;
												flex: 1 0 auto;
												margin: 0 auto;
											}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__clock {
												grid-template-columns: repeat(4, minmax(0, 1fr));
												text-transform: uppercase;
												font-weight: bold;
												letter-spacing: 1px;
												{%- if section.settings.override_theme_font != blank -%}
												font-family: var(--main-font);
												font-weight: var(--main-font-weight);
												font-style: var(--main-font-style);
												{%- endif -%}
												color: {{ section.settings.text_color }};
												border: thin solid {{ section.settings.text_color }};
												font-size: calc(var(--dp-g-body-size, var(--dp-body-size, 18px)) * {{ section.settings.text_size | times: 0.01 }});
											}
										
										
											

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__measurement {
												display: flex;
												flex-direction: column;
												align-items: center;
												padding: 8px 20px;
												border-left: thin solid {{ section.settings.text_color }};
											}

											{% comment %} Style options  {% endcomment %}
											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__clock.dsgn-pck__clock--style_1 {
												border: none;
											}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__clock--style_1 .dsgn-pck__measurement {
												border-left: none;
											}

											/*---*/
											
											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__clock.dsgn-pck__clock--style_2 {
												border: none;
											}
											
											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__clock--style_2 .dsgn-pck__measurement {
												border-left: thin solid {{ section.settings.text_color }};
											}

											/*---*/
											
											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__clock.dsgn-pck__clock--style_3 {
												border: none;
											}
											
											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__clock--style_3 .dsgn-pck__measurement {
												border-left: none;
												padding: 8px 16px;
											}
											
											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__clock--style_3 .dsgn-pck__measurement .dsgn-pck__number {
												border-bottom: thin solid {{ section.settings.text_color }};
												margin-bottom: 12px;
											}

											/*---*/

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__clock.dsgn-pck__clock--style_4 {
												border: thin solid {{ section.settings.text_color }};
											}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__clock--style_4 .dsgn-pck__measurement {
												border-left: thin solid {{ section.settings.text_color }};
											}


											{% comment %} end Style options {% endcomment %}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__measurement:first-child {
												border-left: none;
											}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__number {
												width: 100%;
												text-align: center;
												font-weight: bold;
												padding: 5px 0;
												font-size: 1.5em;
												min-height: 2em;
												display: flex;
												justify-content: center;
												align-items: center;
											}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__label {
												font-size: clamp(9px, 0.5em, 45px);
												width: max-content;
												padding: 0.5em 0.8em;
											}
										</style>
										<div class="dsgn-pck__clock-wrap"
											data-timer-start="{{ block.settings.start_month }} {{ block.settings.start_day }} {{ block.settings.start_year }} {{ block.settings.start_time }} {{ timezone }}"
											data-timer-end="{{ block.settings.end_month }} {{ block.settings.end_day }} {{ block.settings.end_year }} {{ block.settings.end_time }} {{ timezone }}">
												<div class="dsgn-pck__clock dsgn-pck__grid dsgn-pck__clock--{{ block.settings.style_option }}">
													<div class="dsgn-pck__measurement dsgn-pck__days">
														<span class="dsgn-pck__number">--</span>
														<span class="dsgn-pck__label">{{ 'days' | t }}</span>
													</div>
													<div class="dsgn-pck__measurement dsgn-pck__hours">
														<span class="dsgn-pck__number">--</span>
														<span class="dsgn-pck__label">{{ 'hours' | t }}</span>
													</div>
													<div class="dsgn-pck__measurement dsgn-pck__minutes">
														<span class="dsgn-pck__number">--</span>
														<span class="dsgn-pck__label">{{ 'minutes' | t }}</span>
													</div>
													<div class="dsgn-pck__measurement dsgn-pck__seconds">
														<span class="dsgn-pck__number">--</span>
														<span class="dsgn-pck__label dsgn-pck__seconds-text">{{ 'seconds' | t }}</span>
													</div>
												</div>
										</div>
									{%- when 'small_text' -%}
										{%- if block.settings.small_text != blank -%}
											<div class="dsgn-pck__small-text dsgn-pck__rte">
												{{ block.settings.small_text }}
											</div>
										{%- endif -%}
									{%- when 'heading' -%}
										<style>
											{%- if block.settings.enable_custom_font != blank -%}
												{{ block.settings.custom_font | font_face: font_display: 'swap' }}
												{{ block.settings.custom_font | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}
												{{ block.settings.custom_font | font_modify: 'style', 'italic' | font_face: font_display: 'swap' }}
												{{ block.settings.custom_font | font_modify: 'style', 'italic' | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}
												.dsgn-pck__block-id-{{ block.id }} {
													--custom-font: {{ block.settings.custom_font.family }}, {{ block.settings.custom_font.fallback_families }};
													--custom-font-weight: {{ block.settings.custom_font.weight }};
													--custom-font-style: {{ block.settings.custom_font.style }};
												}
											{% endif %}

											{%- assign block_heading_alpha = block.settings.block_heading_color | color_extract: 'alpha' -%}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__heading {
												margin: 0;
												line-height: calc(3px + 2ex + 3px);
												{%- if block_heading_alpha != 0 -%}
													color: {{ block.settings.block_heading_color }};
												{%- endif -%}
												{%- if block.settings.block_heading_size != blank -%}
													font-size: calc({{ block.settings.block_heading_size }} * {{ section.settings.text_size | times: 0.01 }});
												{%- else -%}
													font-size: calc(var(--dp-g-heading-size, var(--dp-heading-size, 35px)) * {{ section.settings.text_size | times: 0.01 }});
												{%- endif -%}
												{%- if block.settings.enable_custom_font != blank -%}
												font-family: var(--custom-font);
												font-weight: var(--custom-font-weight);
												font-style: var(--custom-font-style);
												{%- elsif section.settings.override_theme_font != blank -%}
												font-family: var(--heading-font);
												font-weight: var(--heading-font-weight);
												font-style: var(--heading-font-style);
												{%- endif -%}
											}

											@media (max-width: 480px) {
												.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__heading {
													{%- if block.settings.block_heading_size != blank -%}
														font-size: min({{ block.settings.block_heading_size }}, 50px);
													{%- endif -%}
												}
											}

										</style>
										{%- if block.settings.title != blank -%}
											<{{- block.settings.heading_level }} class="dsgn-pck__heading">
												{{ block.settings.title | newline_to_br }}
											</{{- block.settings.heading_level -}}>
										{%- endif -%}

									{%- when 'text' -%}
										{%- if block.settings.text != blank -%}
											<div class="dsgn-pck__text dsgn-pck__rte">
												{{ block.settings.text }}
											</div>
										{%- endif -%}
									{%- when 'buttons' -%}
										<style>
											{%- assign button_alpha_primary = block.settings.button_background_color_primary | color_extract: 'alpha' -%}
											{%- assign button_alpha_secondary = block.settings.button_background_color_secondary | color_extract: 'alpha' -%}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__button-area {
												display: grid;
												grid-gap: 1.3em;
												{%- if section.settings.text_alignment == 'center' -%}
													margin: 0 auto;
												{%- elsif section.settings.text_alignment == 'right' -%}
													margin: 0 0 0 auto;
												{%- endif -%}
												{%- if block.settings.button_label_primary != blank and block.settings.button_label_secondary != blank -%}
													grid-template-columns: repeat(2, 1fr);
												{%- else -%}
													grid-template-columns: 1fr;
													max-width: 200px;
												{%- endif -%}
												max-width: 100%;
												width: fit-content;
											}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__button {
												display: flex;
												justify-content: center;
												align-items: center;
												text-align: center;
												text-decoration: none;
												padding: 0.5em 1.2em;
												margin-top: 0;
												border: thin solid;
												transition: all 0.3s ease-in-out;
												border-radius: {{ block.settings.button_radius }}px;
												line-height: calc(3px + 2ex + 3px);
												font-size: calc(var(--dp-g-body-size, var(--dp-body-size, 18px)) * {{ section.settings.text_size | times: 0.01 }});
												{%- if section.settings.override_theme_font != blank -%}
												font-family: var(--main-font);
												font-weight: var(--main-font-weight);
												font-style: var(--main-font-style);
												{%- endif -%}
											}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__button-primary {
												color: {{ block.settings.button_label_color_primary }};
												border-color: {%- if button_alpha_primary != 0 -%}{{ block.settings.button_background_color_primary }}{%- else -%}{{ block.settings.button_label_color_primary }}{%- endif -%};
												background-color: {{ block.settings.button_background_color_primary }};
											}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__button-secondary {
												color: {{ block.settings.button_label_color_secondary }};
												border-color: {%- if button_alpha_secondary != 0 -%}{{ block.settings.button_background_color_secondary }}{%- else -%}{{ block.settings.button_label_color_secondary }}{%- endif -%};
												background-color: {{ block.settings.button_background_color_secondary }};
											}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__button-primary:hover {
												opacity: 1;
												{%- if button_alpha_primary != 0 -%}
												background-color: {{ block.settings.button_background_color_primary | color_darken: 10 }};
												border-color: transparent;
												{%- else -%}
												background-color: {{ block.settings.button_label_color_primary | color_modify: 'alpha', 0.1 }}
												{%- endif -%};
											}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__button-secondary:hover {
												opacity: 1;
												{%- if button_alpha_secondary != 0 -%}
												background-color: {{ block.settings.button_background_color_secondary | color_darken: 10 }};
												border-color: transparent;
												{%- else -%}
												background-color: {{ block.settings.button_label_color_secondary | color_modify: 'alpha', 0.1 }}
												{%- endif -%};
											}

											@media (max-width: 480px) {
												.dsgn-pck__block-id-{{ block.id }} div.dsgn-pck__button-area {
													grid-template-columns: 1fr;
													width: 100%;
													gap: 10px;
												}
											}
										</style>
										<div class="dsgn-pck__button-area">
											{%- if block.settings.button_label_primary != blank -%}
												<a class="dsgn-pck__button dsgn-pck__button-primary" {%- if block.settings.link_primary != blank -%} href="{{ block.settings.link_primary }}" {%- endif -%} {% if block.settings.external_link_primary %}target="_blank"{% endif %}>{{ block.settings.button_label_primary }}</a>
											{%- endif -%}
											{%- if block.settings.button_label_secondary != blank -%}
												<a class="dsgn-pck__button dsgn-pck__button-secondary" {%- if block.settings.link_secondary != blank -%}href="{{ block.settings.link_secondary }}"{%- endif -%} {% if block.settings.external_link_secondary %}target="_blank"{% endif %}>{{ block.settings.button_label_secondary }}</a>
											{%- endif -%}
										</div>
									{%- when 'inset_image' -%}
										<style>
											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__image__wrapper {
												width: {{ block.settings.inset_image_size }}%;
												display: inline-block;
											}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__image__wrapper svg {
												width: 100%;
											}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__image__wrapper path {
												fill: {{ section.settings.text_color }};
											}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__item img {
												width: 100%;
												object-fit: contain;
											}
										</style>
										{%- capture placeholder_image -%}
											<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M15.651 12.851c-2.13 1.94-5.17 2.91-9.07 2.91-.91 0-1.87-.04-2.88-.17-.38.86-.6 1.71-.6 2.51 0 .55-.45 1-1 1s-1-.45-1-1c0-.24.01-.48.04-.72.02-.13.03-.26.06-.39.18-1.13.64-2.27 1.29-3.39 2.32-4.02 9.3-8.68 12.61-9.5-4.76-.03-12 3-13.91 6.93 0-2.89 2.3-6.42 5.46-8.38 4.54-2.82 10.47-1.14 12.06 0 .23.16.37.42.38.7.08 2.31-.25 6.62-3.44 9.5z" fill="#5C5F62"/></svg>
										{%- endcapture -%}
										<div class="dsgn-pck__inset-image dsgn-pck__flex dsgn-pck__justify-{%- if block.settings.image_alignment != 'default' -%}{{ block.settings.image_alignment }}{%- else -%}{{ section.settings.text_alignment }}{%- endif -%}">
											{%- if block.settings.inset_image != blank -%}
												<div class="dsgn-pck__image__wrapper">
													<svg viewBox="0 0 {{ block.settings.inset_image.width }} {{ block.settings.inset_image.height }}"></svg>
													{%- capture sizes -%}
														(max-width: 480px) {{ block.settings.inset_image_size }}vw,(max-width: 767px) {{ block.settings.inset_image_size }}vw, {{ 0.5 | times: block.settings.inset_image_size | divided_by: 100.0 | times: 100.0 | round }}vw
													{%- endcapture -%}
													{{ block.settings.inset_image | image_url: width: 1000 | image_tag:  widths: widths, sizes: sizes }}
												</div>
											{%- else -%}
												<div class="dsgn-pck__image__wrapper">
													{{ placeholder_image | strip }}
												</div>
											{%- endif -%}
										</div>
									{%- when 'divider' -%}
										<style>
											.dsgn-pck__block-id-{{ block.id }} {
												padding-top: {{ block.settings.padding_top }}px;
												padding-bottom: {{ block.settings.padding_bottom }}px;
											}

											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__divider {
												height: 0;
												border: none;
												background: transparent;
												{%- if section.settings.text_alignment == 'left' -%}
													margin: 0;
												{%- elsif section.settings.text_alignment == 'right' -%}
													margin: 0 0 0 auto;
												{%- else -%}
													margin: 0 auto;
												{%- endif -%}
												width: {{ block.settings.base_width }}%;
												border-top: {{ block.settings.thickness }}px {{ block.settings.style }} {{ block.settings.divider_color }};
											}
										</style>
										<hr class="dsgn-pck__divider" aria-hidden="true">
									{%- when 'liquid' -%}
										{{ block.settings.liquid }}
									{%- when '@app' -%}
										{% render block %}
									{%- when 'spacer' -%}
										<style>
											#shopify-section-{{ section.id }} #DP--{{ section.id }} .dsgn-pck__block-id-{{ block.id }},
											#shopify-section-{{ section.id }} #DP--{{ section.id }} .dsgn-pck__block-id-{{ block.id }} + .dsgn-pck__block {
												margin-top: 0;
											}
											.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__spacer {
												height: {{ block.settings.size }}px;
												display: block !important;
											}
											@media (max-width: 480px) {
												.dsgn-pck__block-id-{{ block.id }} .dsgn-pck__spacer {
													height: {{ block.settings.size | times: 0.75 | round: 0 }}px;
												}
											}
										</style>
										<div class="dsgn-pck__spacer" aria-hidden="true"></div>
								{%- endcase -%}
							</div>
						{%- endfor -%}
						<div class="dsgn-pck__product-button--container dsgn-pck__block dsgn-pck__justify-{{ section.settings.text_alignment }}">
							<div class="dsgn-pck__product-button--wrapper">
								{%- comment %}<locksmith:9bc7>{% endcomment -%}
								  {%- assign locksmith_20b5_forloop__size = 0 %}{%- for block in feature_products -%}{% capture var %}{% render 'locksmith-variables', scope: 'subject', subject: block, variable: 'transparent' %}{% endcapture %}{% if var == 'true' %}{% assign locksmith_20b5_forloop__size = locksmith_20b5_forloop__size | plus: 1 %}{% endif %}{% endfor %}{% assign locksmith_20b5_forloop__index = nil -%}
								{%- comment %}</locksmith:9bc7>{% endcomment -%}
								{%- for block in feature_products -%}
									{%- comment %}<locksmith:8ee3>{% endcomment -%}
									  {%- capture var %}{% render 'locksmith-variables', scope: 'subject', subject: block, variable: 'transparent' %}{% endcapture %}{% if var == "true" %}{% if locksmith_20b5_forloop__index == nil %}{% assign locksmith_20b5_forloop__index = 1 %}{% assign locksmith_20b5_forloop__index0 = 0 %}{% else %}{% assign locksmith_20b5_forloop__index = locksmith_20b5_forloop__index | plus: 1 %}{% assign locksmith_20b5_forloop__index0 = locksmith_20b5_forloop__index0 | plus: 1 %}{% endif %}{% if locksmith_20b5_forloop__index == 1 %}{% assign locksmith_20b5_forloop__first = true %}{% else %}{% assign locksmith_20b5_forloop__first = false %}{% endif %}{% if locksmith_20b5_forloop__index == locksmith_20b5_forloop__size %}{% assign locksmith_20b5_forloop__last = true %}{% else %}{% assign locksmith_20b5_forloop__last = false %}{% endif %}{% assign locksmith_20b5_forloop__rindex = locksmith_20b5_forloop__size | minus: locksmith_20b5_forloop__index | minus: 1 %}{% assign locksmith_20b5_forloop__rindex0 = locksmith_20b5_forloop__size | minus: locksmith_20b5_forloop__index0 | minus: 1 %}{% else %}{% continue %}{% endif -%}
									{%- comment %}</locksmith:8ee3>{% endcomment -%}
									{% assign this_product = all_products[block.settings.product.handle] %}
									<button class="dsgn-pck__product-button {% if locksmith_20b5_forloop__first %} dsgn-pck__active{% endif %}" data-button-product-id="{{this_product.id}}" >{{  block.settings.button_label }}</button>
								{%- endfor -%}
							</div> 
						</div>
						<div class="dsgn-pck__product-description--wrapper dsgn-pck__block ">
							{%- comment %}<locksmith:2db2>{% endcomment -%}
							  {%- assign locksmith_ec25_forloop__size = 0 %}{%- for block in feature_products -%}{% capture var %}{% render 'locksmith-variables', scope: 'subject', subject: block, variable: 'transparent' %}{% endcapture %}{% if var == 'true' %}{% assign locksmith_ec25_forloop__size = locksmith_ec25_forloop__size | plus: 1 %}{% endif %}{% endfor %}{% assign locksmith_ec25_forloop__index = nil -%}
							{%- comment %}</locksmith:2db2>{% endcomment -%}
							{%- for block in feature_products -%}
								{%- comment %}<locksmith:d1ac>{% endcomment -%}
								  {%- capture var %}{% render 'locksmith-variables', scope: 'subject', subject: block, variable: 'transparent' %}{% endcapture %}{% if var == "true" %}{% if locksmith_ec25_forloop__index == nil %}{% assign locksmith_ec25_forloop__index = 1 %}{% assign locksmith_ec25_forloop__index0 = 0 %}{% else %}{% assign locksmith_ec25_forloop__index = locksmith_ec25_forloop__index | plus: 1 %}{% assign locksmith_ec25_forloop__index0 = locksmith_ec25_forloop__index0 | plus: 1 %}{% endif %}{% if locksmith_ec25_forloop__index == 1 %}{% assign locksmith_ec25_forloop__first = true %}{% else %}{% assign locksmith_ec25_forloop__first = false %}{% endif %}{% if locksmith_ec25_forloop__index == locksmith_ec25_forloop__size %}{% assign locksmith_ec25_forloop__last = true %}{% else %}{% assign locksmith_ec25_forloop__last = false %}{% endif %}{% assign locksmith_ec25_forloop__rindex = locksmith_ec25_forloop__size | minus: locksmith_ec25_forloop__index | minus: 1 %}{% assign locksmith_ec25_forloop__rindex0 = locksmith_ec25_forloop__size | minus: locksmith_ec25_forloop__index0 | minus: 1 %}{% else %}{% continue %}{% endif -%}
								{%- comment %}</locksmith:d1ac>{% endcomment -%}
								{% assign this_product = all_products[block.settings.product.handle] %}
								{% assign this_product_title = block.settings.product_title | default: this_product.title %}
								{% assign this_product_description = block.settings.text | default: this_product.description %}
								<div class="dsgn-pck__product-description dsgn-pck__text dsgn-pck__rte {% if locksmith_ec25_forloop__first %} dsgn-pck__active{% endif %}" data-description-product-id="{{this_product.id}}">
									<h3>{{ block.settings.sur_title }}</h3>
									<h2>{{ this_product_title }}</h2>
									<div class="dsgn-pck__text dsgn-pck__rte">
										{{ this_product_description }}
									</div>
								</div>
							{%- endfor -%}
						</div> 
					</div>
				</div>
				<!-- END Blocks Loop -->
				<div class="dsgn-pck__feature-products">
					{%- comment %}<locksmith:96e2>{% endcomment -%}
					  {%- assign locksmith_5cba_forloop__size = 0 %}{%- for block in feature_products -%}{% capture var %}{% render 'locksmith-variables', scope: 'subject', subject: block, variable: 'transparent' %}{% endcapture %}{% if var == 'true' %}{% assign locksmith_5cba_forloop__size = locksmith_5cba_forloop__size | plus: 1 %}{% endif %}{% endfor %}{% assign locksmith_5cba_forloop__index = nil -%}
					{%- comment %}</locksmith:96e2>{% endcomment -%}
					{%- for block in feature_products -%}
						{%- comment %}<locksmith:0736>{% endcomment -%}
						  {%- capture var %}{% render 'locksmith-variables', scope: 'subject', subject: block, variable: 'transparent' %}{% endcapture %}{% if var == "true" %}{% if locksmith_5cba_forloop__index == nil %}{% assign locksmith_5cba_forloop__index = 1 %}{% assign locksmith_5cba_forloop__index0 = 0 %}{% else %}{% assign locksmith_5cba_forloop__index = locksmith_5cba_forloop__index | plus: 1 %}{% assign locksmith_5cba_forloop__index0 = locksmith_5cba_forloop__index0 | plus: 1 %}{% endif %}{% if locksmith_5cba_forloop__index == 1 %}{% assign locksmith_5cba_forloop__first = true %}{% else %}{% assign locksmith_5cba_forloop__first = false %}{% endif %}{% if locksmith_5cba_forloop__index == locksmith_5cba_forloop__size %}{% assign locksmith_5cba_forloop__last = true %}{% else %}{% assign locksmith_5cba_forloop__last = false %}{% endif %}{% assign locksmith_5cba_forloop__rindex = locksmith_5cba_forloop__size | minus: locksmith_5cba_forloop__index | minus: 1 %}{% assign locksmith_5cba_forloop__rindex0 = locksmith_5cba_forloop__size | minus: locksmith_5cba_forloop__index0 | minus: 1 %}{% else %}{% continue %}{% endif -%}
						{%- comment %}</locksmith:0736>{% endcomment -%}
						{%- if block.settings.product != blank -%}
							{% assign this_product = all_products[block.settings.product.handle] %}
							<div class="dsgn-pck__feature-product dsgn-pck__image-wrapper {% if locksmith_5cba_forloop__first %} dsgn-pck__active{% endif %}" data-image-product-id="{{this_product.id}}">
								{% if block.settings.product_image != blank %}
									{{ block.settings.product_image | image_url: width: 5000 | image_tag:  widths: widths, sizes: sizes }}
								{% else %}
									{{ this_product.featured_image | image_url: width: 5000 | image_tag:  widths: widths, sizes: sizes }}
								{% endif  %}
							</div>
						{%- endif -%}
					{%- endfor -%}
				</div>
			</div>
    </div>
  </div>
</section>
{%- endcapture -%}
{{ minify | strip_newlines }}

{% schema %}
{
  "name": "Comparison slider w text🛍",
  "class": "DP__image-with-text-simple",
  "blocks": [
		{
			"type": "feature_product",
			"name": "Feature product",
			"settings": [
				{
          "type": "text",
          "id": "button_label",
          "label": "Button label",
          "default": "Skin concern"
        },
				{
          "type": "product",
          "id": "product",
          "label": "Product"
        },
				{
          "type": "text",
          "id": "sur_title",
          "label": "Sur title",
          "default": "Sur title"
        },
				{
          "type": "text",
          "id": "product_title",
          "label": "Product title",
          "default": "Product title"
        },
				{
					"type": "richtext",
					"id": "text",
					"label": "Text",
					"default": "<p>Drag and drop block options like heading, text, buttons, dividers, and more.</p>"
				},
				{
          "type": "image_picker",
          "id": "left_image",
          "label": "Left Image"
        },
				{
					"type": "text",
					"id": "left_caption",
					"label": "Left caption (optional)"
				},
				{
          "type": "image_picker",
          "id": "right_image",
          "label": "Right Image",
					"info": "Use right image if only 1 image"
        },
				{
					"type": "text",
					"id": "right_caption",
					"label": "Right caption (optional)"
				},
				{
          "type": "image_picker",
          "id": "product_image",
          "label": "Product Image"
        }
			]
		},
    {
      "type": "heading",
      "name": "Heading",
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Heading",
          "default": "Attention-grabbing headline"
        },
        {
          "type": "header",
          "content": "🚨 Advanced"
        },
        {
          "type": "color",
          "id": "block_heading_color",
          "label": "Heading color"
        },
        {
          "type": "text",
          "id": "block_heading_size",
          "label": "Base text size",
          "info": "Set custom base size for heading. Leave empty to default to base size of 35px. Base size is affected by section text size setting."
        },
        {
          "type": "checkbox",
          "id": "enable_custom_font",
          "label": "Enable custom font",
          "default": false
        },
        {
          "type": "font_picker",
          "id": "custom_font",
          "label": "Custom font",
          "default": "abel_n4"
        },
        {
          "type": "select",
          "id": "heading_level",
          "label": "Heading level",
          "options": [
            {
              "value": "h1",
              "label": "h1"
            },
            {
              "value": "h2",
              "label": "h2"
            },
            {
              "value": "h3",
              "label": "h3"
            },
            {
              "value": "h4",
              "label": "h4"
            },
            {
              "value": "h5",
              "label": "h5"
            },
            {
              "value": "h6",
              "label": "h6"
            }
          ],
          "default": "h2",
          "info": "The most important heading has the rank 1 (<h1>) and the least important heading has rank 6 (<h6>). Only use one h1 on a page."
        }
      ]
    },
    {
      "type": "highlighted_heading",
      "name": "Highlighted heading",
      "settings": [
        {
          "type": "paragraph",
          "content": "Use square brackets [] around text that you would like to highlight."
        },
        {
          "type": "text",
          "id": "title",
          "label": "Heading",
          "default": "[Attention-grabbing] headline"
        },
        {
          "type": "header",
          "content": "Highlight font"
        },
        {
          "type": "checkbox",
          "id": "highlight_enable_custom_font",
          "label": "Enable custom font on highlighted text",
          "default": false
        },
        {
          "type": "font_picker",
          "id": "highlight_custom_font",
          "label": "Highlight font",
          "default": "abel_n4"
        },
        {
          "type": "select",
          "id": "highlight_option",
          "label": "Choose option",
          "options": [
            {
            "value": "background_highlight",
            "label": "Background highlight"
            },
            {
              "value": "text_highlight",
              "label": "Text highlight"
              }
          ],
          "default": "background_highlight"
        },
        {
          "type": "header",
          "content": "Option 1: background highlight"
        },
        {
          "type": "color",
          "id": "highlight_background_text_color",
          "label": "Text",
          "default": "#FFFFFF"
        },
        {
          "type": "color_background",
          "id": "highlight_background_color",
          "label": "Text background",
          "default": "linear-gradient(270deg, rgba(125, 164, 142, 1), rgba(104, 141, 96, 1) 100%)"
        },
        {
          "type": "header",
          "content": "Option 2: text highlight"
        },
        {
          "type": "color_background",
          "id": "highlight_text_color",
          "label": "Text",
          "default": "linear-gradient(270deg, rgba(125, 164, 142, 1), rgba(104, 141, 96, 1) 100%)"
        },
        {
          "type": "header",
          "content": "🚨 Advanced"
        },
        {
          "type": "text",
          "id": "highlight_heading_size",
          "label": "Base text size",
          "placeholder": "eg. 40px",
          "info": "Set custom base size for highlight text. Leave empty to default to base size of 35px. Base size is affected by section text size setting."
        },
        {
          "type": "select",
          "id": "heading_level",
          "label": "Heading level",
          "options": [
            {
              "value": "h1",
              "label": "h1"
            },
            {
              "value": "h2",
              "label": "h2"
            },
            {
              "value": "h3",
              "label": "h3"
            },
            {
              "value": "h4",
              "label": "h4"
            },
            {
              "value": "h5",
              "label": "h5"
            },
            {
              "value": "h6",
              "label": "h6"
            }
          ],
          "default": "h2",
          "info": "The most important heading has the rank 1 (<h1>) and the least important heading has rank 6 (<h6>). Only use one h1 on a page."
        }
      ]
    },
    {
      "type": "spacer",
      "name": "Spacer",
      "settings": [
        {
          "type": "range",
          "id": "size",
          "label": "Spacing height",
          "min": 0,
          "max": 100,
          "default": 40,
          "unit": "px"
        }
      ]
    },
    {
      "type": "divider",
      "name": "Divider",
      "settings": [
        {
          "type": "range",
          "id": "base_width",
          "label": "Width",
          "min": 20,
          "max": 100,
          "step": 5,
          "default": 50,
          "unit": "%"
        },
        {
          "type": "range",
          "id": "thickness",
          "label": "Thickness",
          "min": 0,
          "max": 10,
          "default": 1,
          "unit": "px"
        },
        {
          "type": "select",
          "id": "style",
          "label": "Style",
          "default": "solid",
          "options": [
            {
              "value": "solid",
              "label": "Solid line"
            },
            {
              "value": "dotted",
              "label": "Dotted line"
            },
            {
              "value": "dashed",
              "label": "Dashed line"
            },
            {
              "value": "double",
              "label": "Double line"
            }
          ]
        },
        {
          "type": "header",
          "content": "🎨 Design"
        },
        {
          "type": "color",
          "id": "divider_color",
          "label": "Color",
          "default": "#FFFFFF"
        },
        {
          "type": "header",
          "content": "🖼 Layout"
        },
        {
          "type": "range",
          "id": "padding_top",
          "label": "Padding - top",
          "min": 0,
          "max": 100,
          "default": 40,
          "step": 5,
          "unit": "px"
        },
        {
          "type": "range",
          "id": "padding_bottom",
          "label": "Padding - bottom",
          "min": 0,
          "max": 100,
          "default": 40,
          "step": 5,
          "unit": "px"
        }
      ]
    },
    {
      "type": "text",
      "name": "Regular text",
      "settings": [
        {
          "type": "richtext",
          "id": "text",
          "label": "Text",
          "default": "<p>Drag and drop block options like heading, text, buttons, dividers, and more.</p>"
        }
      ]
    },
    {
      "type": "collapsible_content",
      "name": "Collapsible content",
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Heading",
          "default": "Shipping information"
        },
        {
          "type": "richtext",
          "id": "text",
          "label": "Collapsed content",
          "default": "<p>Lorem ipsum dolor.</p>"
        },
        {
          "type": "select",
          "id": "icon_style",
          "label": "Icon style",
          "options": [
            {
              "value": "plus_minus",
              "label": "Plus and minus"
            },
            {
              "value": "plus_minus_square",
              "label": "Plus and minus buttons"
            },
            {
              "value": "caret",
              "label": "Carets"
            }
          ],
          "default": "plus_minus_square"
        },
        {
          "type": "checkbox",
          "id": "show_open",
          "label": "Show open by default",
          "default": false
        }
      ]
    },
    {
      "type": "small_text",
      "name": "Small text",
      "settings": [
        {
          "type": "richtext",
          "id": "small_text",
          "label": "Small text",
          "default": "<p>New arrivals</p>"
        }
      ]
    },
    {
      "type": "list",
      "name": "List",
      "settings": [
        {
          "type": "richtext",
          "id": "text",
          "label": "List items",
          "default": "<p>** Important point number one</p><p>** Next point in the list</p>",
          "info": "Use two asterisks (**) to create a new list item"
        },
        {
          "type": "select",
          "id": "list_style",
          "label": "Style",
          "options": [
            {
              "value": "decimal",
              "label": "Numbered"
            },
            {
              "value": "square",
              "label": "Square"
            },
            {
              "value": "circle",
              "label": "Circle outline"
            },
            {
              "value": "inherit",
              "label": "Disc (default)"
            }
          ],
          "default": "inherit"
        }
      ]
    },
    {
      "type": "buttons",
      "name": "Buttons",
      "settings": [
        {
          "type": "range",
          "id": "button_radius",
          "label": "Button border radius",
          "min": 0,
          "max": 50,
          "default": 0,
          "unit": "px"
        },
        {
          "type": "header",
          "content": "Primary button"
        },
        {
          "type": "text",
          "id": "button_label_primary",
          "label": "Primary button",
          "default": "Learn more"
        },
        {
          "type": "url",
          "id": "link_primary",
          "label": "Primary link"
        },
        {
          "type": "checkbox",
          "id": "external_link_primary",
          "label": "Open primary link in a new window"
        },
        {
          "type": "color",
          "id": "button_label_color_primary",
          "label": "Primary button label",
          "default": "#121212"
        },
        {
          "type": "color",
          "id": "button_background_color_primary",
          "label": "Primary button background",
          "default": "rgba(0,0,0,0)"
        },
        {
          "type": "header",
          "content": "Secondary button"
        },
        {
          "type": "text",
          "id": "button_label_secondary",
          "label": "Secondary button",
          "default": "Shop now"
        },
        {
          "type": "url",
          "id": "link_secondary",
          "label": "Secondary link"
        },
        {
          "type": "checkbox",
          "id": "external_link_secondary",
          "label": "Open secondary link in a new window"
        },
        {
          "type": "color",
          "id": "button_label_color_secondary",
          "label": "Secondary button label",
          "default": "#FFFFFF"
        },
        {
          "type": "color",
          "id": "button_background_color_secondary",
          "label": "Secondary button background",
          "default": "#121212"
        }
      ]
    },
    {
      "type": "icons",
      "name": "Icons",
      "settings": [
        {
          "type": "range",
          "id": "icon_width",
          "label": "Icon width",
          "default": 25,
          "min": 10,
          "max": 100,
          "unit": "%"
        },
        {
          "type": "range",
          "id": "image_size",
          "min": 10,
          "max": 100,
          "label": "Image size",
          "default": 100,
          "unit": "%"
        },
        {
          "type": "range",
          "id": "gap",
          "min": 0,
          "max": 40,
          "label": "Spacing gap",
          "unit": "px",
          "default": 20
        },
        {
          "type": "select",
          "id": "icon_alignment",
          "label": "Icon alignment",
          "default": "default",
          "options": [
            {
              "value": "left",
              "label": "Left"
            },
            {
              "value": "center",
              "label": "Center"
            },
            {
              "value": "right",
              "label": "Right"
            },
            {
              "value": "default",
              "label": "Default"
            }
          ]
        },
        {
          "type": "header",
          "content": "📱 Mobile"
        },
        {
          "type": "range",
          "id": "mobile_icon_width",
          "label": "Icon size",
          "default": 50,
          "min": 10,
          "max": 100,
          "unit": "%"
        },
        {
          "type": "header",
          "content": "Icon 1"
        },
        {
          "type": "image_picker",
          "id": "icon_1",
          "label": "Icon 1"
        },
        {
          "type": "text",
          "id": "text_1",
          "label": "Text 1"
        },
        {
          "type": "url",
          "id": "link_1",
          "label": "Link 1"
        },
        {
          "type": "header",
          "content": "Icon 2"
        },
        {
          "type": "image_picker",
          "id": "icon_2",
          "label": "Icon 2"
        },
        {
          "type": "text",
          "id": "text_2",
          "label": "Text 2"
        },
        {
          "type": "url",
          "id": "link_2",
          "label": "Link 2"
        },
        {
          "type": "header",
          "content": "Icon 3"
        },
        {
          "type": "image_picker",
          "id": "icon_3",
          "label": "Icon 3"
        },
        {
          "type": "text",
          "id": "text_3",
          "label": "Text 3"
        },
        {
          "type": "url",
          "id": "link_3",
          "label": "Link 3"
        },
        {
          "type": "header",
          "content": "Icon 4"
        },
        {
          "type": "image_picker",
          "id": "icon_4",
          "label": "Icon 4"
        },
        {
          "type": "text",
          "id": "text_4",
          "label": "Text 4"
        },
        {
          "type": "url",
          "id": "link_4",
          "label": "Link 4"
        }
      ]
    },
    {
      "type": "text_columns",
      "name": "Text columns",
      "settings": [
        {
          "type": "range",
          "id": "gap",
          "min": 0,
          "max": 40,
          "label": "Spacing gap",
          "unit": "px",
          "default": 10
        },
        {
          "type": "select",
          "id": "text_alignment",
          "label": "Text alignment",
          "default": "center",
          "options": [
            {
              "value": "left",
              "label": "Left"
            },
            {
              "value": "center",
              "label": "Center"
            },
            {
              "value": "right",
              "label": "Right"
            },
            {
              "value": "justify",
              "label": "Justify"
            }
          ]
        },
        {
          "type": "header",
          "content": "Column 1"
        },
        {
          "type": "text",
          "id": "heading_1",
          "label": "Heading"
        },
        {
          "type": "richtext",
          "id": "column_1",
          "label": "Text",
          "default": "<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris nibh enim, ornare at consequat sed, placerat quis libero. Curabitur id nulla ut nunc aliquam sodales.</p>"
        },
        {
          "type": "header",
          "content": "Column 2"
        },
        {
          "type": "text",
          "id": "heading_2",
          "label": "Heading"
        },
        {
          "type": "richtext",
          "id": "column_2",
          "label": "Text",
          "default": "<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris nibh enim, ornare at consequat sed, placerat quis libero. Curabitur id nulla ut nunc aliquam sodales.</p>"
        }
      ]
    },
    {
      "type": "inset_image",
      "name": "Image",
      "settings": [
        {
          "type": "image_picker",
          "id": "inset_image",
          "label": "Image"
        },
        {
          "type": "range",
          "id": "inset_image_size",
          "label": "Image size",
          "default": 10,
          "min": 5,
          "max": 100,
          "step": 5,
          "unit": "%"
        },
        {
          "type": "select",
          "id": "image_alignment",
          "label": "Image alignment",
          "default": "default",
          "options": [
            {
              "value": "left",
              "label": "Left"
            },
            {
              "value": "center",
              "label": "Center"
            },
            {
              "value": "right",
              "label": "Right"
            },
            {
              "value": "default",
              "label": "Default"
            }
          ]
        }
      ]
    },
    {
      "type": "slider_block",
      "name": "Slider",
      "settings": [
        {
          "type": "select",
          "id": "slider_animation",
          "label": "Slideshow transition",
          "info": "Minumum of 3 slides required to use 'Fade'",
          "options": [
            {
              "value": "fade",
              "label": "Fade"
            },
            {
              "value": "slide",
              "label": "Slide"
            }
          ],
          "default": "slide"
        },
        {
          "type": "checkbox",
          "id": "show_arrows",
          "label": "Show arrows",
          "default": true
        },
        {
          "type": "checkbox",
          "id": "show_dots",
          "label": "Show navigation dots",
          "default": true
        },
        {
          "type": "range",
          "id": "autoplay",
          "label": "Change slide every",
          "min": 0,
          "max": 12,
          "step": 1,
          "default": 8,
          "unit": "sec",
          "info": "Set to '0' to disable autoplay"
        },
        {
          "type": "range",
          "id": "image_width",
          "label": "Slider width",
          "default": 100,
          "min": 50,
          "max": 100,
          "unit": "%"
        },
        {
          "type": "header",
          "content": "📱 Mobile"
        },
        {
          "type": "range",
          "id": "mobile_image_width",
          "label": "Slider width",
          "default": 100,
          "min": 50,
          "max": 100,
          "unit": "%"
        },
        {
          "type": "header",
          "content": "Slide 1"
        },
        {
          "type": "image_picker",
          "id": "image_1",
          "label": "Image 1"
        },
        {
          "type": "richtext",
          "id": "text_1",
          "label": "Text 1"
        },
        {
          "type": "header",
          "content": "Slide 2"
        },
        {
          "type": "image_picker",
          "id": "image_2",
          "label": "Image 2"
        },
        {
          "type": "richtext",
          "id": "text_2",
          "label": "Text 2"
        },
        {
          "type": "header",
          "content": "Slide 3"
        },
        {
          "type": "image_picker",
          "id": "image_3",
          "label": "Image 3"
        },
        {
          "type": "richtext",
          "id": "text_3",
          "label": "Text 3"
        },
        {
          "type": "header",
          "content": "Slide 4"
        },
        {
          "type": "image_picker",
          "id": "image_4",
          "label": "Image 4"
        },
        {
          "type": "richtext",
          "id": "text_4",
          "label": "Text 4"
        }
      ]
    },
    {
      "type": "newsletter",
      "name": "Newsletter form",
      "limit": 1,
      "settings": [
        {
          "type": "paragraph",
          "content": "Any customers who sign up will have an account created for them in Shopify. [View customers](/admin/customers?query=&accepts_marketing=1)"
        },
        {
          "type": "select",
          "id": "layout",
          "label": "Layout",
          "options": [
            {
              "value": "stacked",
              "label": "Stacked"
            },
            {
              "value": "compact",
              "label": "Compact"
            }
          ],
          "default": "compact"
        },
        {
          "type": "text",
          "id": "email_label",
          "label": "Email label",
          "default": "Email address"
        },
        {
          "type": "text",
          "id": "submit_label",
          "label": "Submit label",
          "default": "Submit"
        },
        {
          "type": "header",
          "content": "First name"
        },
        {
          "type": "checkbox",
          "id": "show_first_name",
          "label": "Show first name",
          "default": false
        },
        {
          "type": "text",
          "id": "first_name_label",
          "label": "First name label",
          "default": "First name"
        },
        {
          "type": "header",
          "content": "Last name"
        },
        {
          "type": "checkbox",
          "id": "show_last_name",
          "label": "Show last name",
          "default": false
        },
        {
          "type": "text",
          "id": "last_name_label",
          "label": "Last name label",
          "default": "Last name"
        },
        {
          "type": "header",
          "content": "🎨 Design"
        },
        {
          "type": "color",
          "id": "button_label_color",
          "label": "Button label",
          "default": "#FFFFFF"
        },
        {
          "type": "color",
          "id": "button_background_color",
          "label": "Button background",
          "default": "#283144"
        },
        {
          "type": "range",
          "id": "button_radius",
          "label": "Button border radius",
          "min": 0,
          "max": 50,
          "default": 0,
          "unit": "px"
        }
      ]
    },
    {
      "type": "video",
      "name": "Video",
      "settings": [
        {
          "type": "video",
          "id": "video",
          "label": "Video"
        },
        {
          "type": "checkbox",
          "id": "autoplay",
          "label": "Autoplay",
          "info": "Video will be muted.",
          "default": false
        },
        {
          "type": "checkbox",
          "id": "loop",
          "label": "Loop video",
          "default": false
        },
        {
          "type": "checkbox",
          "id": "show_controls",
          "label": "Show controls",
          "default": true
        }
      ]
    },
    {
      "type": "feature_range",
      "name": "Feature range",
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Heading",
          "default": "Heading"
        },
        {
          "type": "text",
          "id": "low_range_label",
          "label": "Low range label",
          "default": "Mild"
        },
        {
          "type": "text",
          "id": "high_range_label",
          "label": "High range label",
          "default": "Spicy"
        },
        {
          "type": "range",
          "id": "level",
          "label": "Level",
          "default": 5,
          "min": 0,
          "max": 10,
          "step": 0.1
        },
        {
          "type": "header",
          "content": "🎨 Design"
        },
        {
          "type": "color",
          "id": "line_color",
          "label": "Line",
          "default": "#283144"
        },
        {
          "type": "color",
          "id": "dot_color",
          "label": "Dot",
          "default": "#283144"
        },
        {
          "type": "range",
          "id": "line_size",
          "label": "Line size",
          "default": 1,
          "min": 1,
          "max": 8
        },
        {
          "type": "range",
          "id": "dot_size",
          "label": "Dot size",
          "default": 18,
          "min": 10,
          "max": 40
        }
      ]
    },
    {
      "type": "countdown_timer",
      "name": "Countdown timer",
      "limit": 1,
      "settings": [
        {
          "type": "select",
          "id": "style_option",
          "label": "Style option",
          "default": "style_1",
          "options": [
            {
              "value": "style_1",
              "label": "Style 1"
            },
            {
              "value": "style_2",
              "label": "Style 2"
            },
            {
              "value": "style_3",
              "label": "Style 3"
            },
            {
              "value": "style_4",
              "label": "Style 4"
            }
          ]
        },
        {
          "type": "select",
          "id": "timezone",
          "label": "Timezone",
          "default": "-05:00 ~ (GMT-05:00) Eastern Time (US & Canada)",
          "options": [
            {
              "value": "-11:00 ~ (GMT-11:00) International Date Line West",
              "label": "(GMT-11:00) International Date Line West"
            },
            {
              "value": "-11:00 ~ (GMT-11:00) Midway Island",
              "label": "(GMT-11:00) Midway Island"
            },
            {
              "value": "-11:00 ~ (GMT-11:00) American Samoa",
              "label": "(GMT-11:00) American Samoa"
            },
            {
              "value": "-10:00 ~ (GMT-10:00) Hawaii",
              "label": "(GMT-10:00) Hawaii"
            },
            {
              "value": "-09:00 ~ (GMT-09:00) Alaska",
              "label": "(GMT-09:00) Alaska"
            },
            {
              "value": "-08:00 ~ (GMT-08:00) Pacific Time (US & Canada)",
              "label": "(GMT-08:00) Pacific Time (US & Canada)"
            },
            {
              "value": "-08:00 ~ (GMT-08:00) Tijuana",
              "label": "(GMT-08:00) Tijuana"
            },
            {
              "value": "-07:00 ~ (GMT-07:00) Mountain Time (US & Canada)",
              "label": "(GMT-07:00) Mountain Time (US & Canada)"
            },
            {
              "value": "-07:00 ~ (GMT-07:00) Arizona",
              "label": "(GMT-07:00) Arizona"
            },
            {
              "value": "-07:00 ~ (GMT-07:00) Chihuahua",
              "label": "(GMT-07:00) Chihuahua"
            },
            {
              "value": "-06:00 ~ (GMT-06:00) Central Time (US & Canada)",
              "label": "(GMT-06:00) Central Time (US & Canada)"
            },
            {
              "value": "-06:00 ~ (GMT-06:00) Saskatchewan",
              "label": "(GMT-06:00) Saskatchewan"
            },
            {
              "value": "-06:00 ~ (GMT-06:00) Monterrey",
              "label": "(GMT-06:00) Monterrey"
            },
            {
              "value": "-05:00 ~ (GMT-05:00) Eastern Time (US & Canada)",
              "label": "(GMT-05:00) Eastern Time (US & Canada)"
            },
            {
              "value": "-05:00 ~ (GMT-05:00) Indiana (East)",
              "label": "(GMT-05:00) Indiana (East)"
            },
            {
              "value": "-05:00 ~ (GMT-05:00) Bogota",
              "label": "(GMT-05:00) Bogota"
            },
            {
              "value": "-05:00 ~ (GMT-05:00) Lima",
              "label": "(GMT-05:00) Lima"
            },
            {
              "value": "-05:00 ~ (GMT-05:00) Quito",
              "label": "(GMT-05:00) Quito"
            },
            {
              "value": "-04:00 ~ (GMT-04:00) Atlantic Time (Canada)",
              "label": "(GMT-04:00) Atlantic Time (Canada)"
            },
            {
              "value": "-04:30 ~ (GMT-04:30) Caracas",
              "label": "(GMT-04:30) Caracas"
            },
            {
              "value": "-04:00 ~ (GMT-04:00) La Paz",
              "label": "(GMT-04:00) La Paz"
            },
            {
              "value": "-04:00 ~ (GMT-04:00) Santiago",
              "label": "(GMT-04:00) Santiago"
            },
            {
              "value": "-03:30 ~ (GMT-03:30) Newfoundland",
              "label": "(GMT-03:30) Newfoundland"
            },
            {
              "value": "-03:00 ~ (GMT-03:00) Brasilia",
              "label": "(GMT-03:00) Brasilia"
            },
            {
              "value": "-03:00 ~ (GMT-03:00) Buenos Aires",
              "label": "(GMT-03:00) Buenos Aires"
            },
            {
              "value": "-04:00 ~ (GMT-04:00) Georgetown",
              "label": "(GMT-04:00) Georgetown"
            },
            {
              "value": "-03:00 ~ (GMT-03:00) Greenland",
              "label": "(GMT-03:00) Greenland"
            },
            {
              "value": "-01:00 ~ (GMT-01:00) Azores",
              "label": "(GMT-01:00) Azores"
            },
            {
              "value": "-01:00 ~ (GMT-01:00) Cape Verde Is.",
              "label": "(GMT-01:00) Cape Verde Is."
            },
            {
              "value": "+00:00 ~ (GMT+00:00) Dublin",
              "label": "(GMT+00:00) Dublin"
            },
            {
              "value": "+00:00 ~ (GMT+00:00) Edinburgh",
              "label": "(GMT+00:00) Edinburgh"
            },
            {
              "value": "+00:00 ~ (GMT+00:00) Lisbon",
              "label": "(GMT+00:00) Lisbon"
            },
            {
              "value": "+00:00 ~ (GMT+00:00) Casablanca",
              "label": "(GMT+00:00) Casablanca"
            },
            {
              "value": "+00:00 ~ (GMT+00:00) Monrovia",
              "label": "(GMT+00:00) Monrovia"
            },
            {
              "value": "+00:00 ~ (GMT+00:00) UTC",
              "label": "(GMT+00:00) UTC"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Belgrade",
              "label": "(GMT+01:00) Belgrade"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Bratislava",
              "label": "(GMT+01:00) Bratislava"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Budapest",
              "label": "(GMT+01:00) Budapest"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Ljubljana",
              "label": "(GMT+01:00) Ljubljana"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Prague",
              "label": "(GMT+01:00) Prague"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Sarajevo",
              "label": "(GMT+01:00) Sarajevo"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Skopje",
              "label": "(GMT+01:00) Skopje"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Warsaw",
              "label": "(GMT+01:00) Warsaw"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Zagreb",
              "label": "(GMT+01:00) Zagreb"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Brussels",
              "label": "(GMT+01:00) Brussels"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Copenhagen",
              "label": "(GMT+01:00) Copenhagen"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Madrid",
              "label": "(GMT+01:00) Madrid"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Paris",
              "label": "(GMT+01:00) Paris"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Amsterdam",
              "label": "(GMT+01:00) Amsterdam"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Berlin",
              "label": "(GMT+01:00) Berlin"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Bern",
              "label": "(GMT+01:00) Bern"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Rome",
              "label": "(GMT+01:00) Rome"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Stockholm",
              "label": "(GMT+01:00) Stockholm"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Vienna",
              "label": "(GMT+01:00) Vienna"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) West Central Africa",
              "label": "(GMT+01:00) West Central Africa"
            },
            {
              "value": "+02:00 ~ (GMT+02:00) Bucharest",
              "label": "(GMT+02:00) Bucharest"
            },
            {
              "value": "+02:00 ~ (GMT+02:00) Cairo",
              "label": "(GMT+02:00) Cairo"
            },
            {
              "value": "+02:00 ~ (GMT+02:00) Helsinki",
              "label": "(GMT+02:00) Helsinki"
            },
            {
              "value": "+02:00 ~ (GMT+02:00) Kyiv",
              "label": "(GMT+02:00) Kyiv"
            },
            {
              "value": "+02:00 ~ (GMT+02:00) Riga",
              "label": "(GMT+02:00) Riga"
            },
            {
              "value": "+02:00 ~ (GMT+02:00) Sofia",
              "label": "(GMT+02:00) Sofia"
            },
            {
              "value": "+02:00 ~ (GMT+02:00) Tallinn",
              "label": "(GMT+02:00) Tallinn"
            },
            {
              "value": "+02:00 ~ (GMT+02:00) Vilnius",
              "label": "(GMT+02:00) Vilnius"
            },
            {
              "value": "+02:00 ~ (GMT+02:00) Athens",
              "label": "(GMT+02:00) Athens"
            },
            {
              "value": "+02:00 ~ (GMT+02:00) Istanbul",
              "label": "(GMT+02:00) Istanbul"
            },
            {
              "value": "+03:00 ~ (GMT+03:00) Minsk",
              "label": "(GMT+03:00) Minsk"
            },
            {
              "value": "+02:00 ~ (GMT+02:00) Jerusalem",
              "label": "(GMT+02:00) Jerusalem"
            },
            {
              "value": "+02:00 ~ (GMT+02:00) Harare",
              "label": "(GMT+02:00) Harare"
            },
            {
              "value": "+02:00 ~ (GMT+02:00) Pretoria",
              "label": "(GMT+02:00) Pretoria"
            },
            {
              "value": "+04:00 ~ (GMT+04:00) Moscow",
              "label": "(GMT+04:00) Moscow"
            },
            {
              "value": "+04:00 ~ (GMT+04:00) Volgograd",
              "label": "(GMT+04:00) Volgograd"
            },
            {
              "value": "+03:00 ~ (GMT+03:00) Kuwait",
              "label": "(GMT+03:00) Kuwait"
            },
            {
              "value": "+03:00 ~ (GMT+03:00) Riyadh",
              "label": "(GMT+03:00) Riyadh"
            },
            {
              "value": "+03:00 ~ (GMT+03:00) Nairobi",
              "label": "(GMT+03:00) Nairobi"
            },
            {
              "value": "+03:00 ~ (GMT+03:00) Baghdad",
              "label": "(GMT+03:00) Baghdad"
            },
            {
              "value": "+03:30 ~ (GMT+03:30) Tehran",
              "label": "(GMT+03:30) Tehran"
            },
            {
              "value": "+04:00 ~ (GMT+04:00) Abu Dhabi",
              "label": "(GMT+04:00) Abu Dhabi"
            },
            {
              "value": "+04:00 ~ (GMT+04:00) Muscat",
              "label": "(GMT+04:00) Muscat"
            },
            {
              "value": "+04:00 ~ (GMT+04:00) Baku",
              "label": "(GMT+04:00) Baku"
            },
            {
              "value": "+04:00 ~ (GMT+04:00) Tbilisi",
              "label": "(GMT+04:00) Tbilisi"
            },
            {
              "value": "+04:00 ~ (GMT+04:00) Yerevan",
              "label": "(GMT+04:00) Yerevan"
            },
            {
              "value": "+04:30 ~ (GMT+04:30) Kabul",
              "label": "(GMT+04:30) Kabul"
            },
            {
              "value": "+06:00 ~ (GMT+06:00) Ekaterinburg",
              "label": "(GMT+06:00) Ekaterinburg"
            },
            {
              "value": "+05:00 ~ (GMT+05:00) Islamabad",
              "label": "(GMT+05:00) Islamabad"
            },
            {
              "value": "+05:00 ~ (GMT+05:00) Karachi",
              "label": "(GMT+05:00) Karachi"
            },
            {
              "value": "+05:00 ~ (GMT+05:00) Tashkent",
              "label": "(GMT+05:00) Tashkent"
            },
            {
              "value": "+05:30 ~ (GMT+05:30) Chennai",
              "label": "(GMT+05:30) Chennai"
            },
            {
              "value": "+05:30 ~ (GMT+05:30) Kolkata",
              "label": "(GMT+05:30) Kolkata"
            },
            {
              "value": "+05:45 ~ (GMT+05:45) Kathmandu",
              "label": "(GMT+05:45) Kathmandu"
            },
            {
              "value": "+06:00 ~ (GMT+06:00) Astana",
              "label": "(GMT+06:00) Astana"
            },
            {
              "value": "+06:00 ~ (GMT+06:00) Dhaka",
              "label": "(GMT+06:00) Dhaka"
            },
            {
              "value": "+05:30 ~ (GMT+05:30) Sri Jayawardenepura",
              "label": "(GMT+05:30) Sri Jayawardenepura"
            },
            {
              "value": "+06:00 ~ (GMT+06:00) Almaty",
              "label": "(GMT+06:00) Almaty"
            },
            {
              "value": "+07:00 ~ (GMT+07:00) Novosibirsk",
              "label": "(GMT+07:00) Novosibirsk"
            },
            {
              "value": "+06:30 ~ (GMT+06:30) Rangoon",
              "label": "(GMT+06:30) Rangoon"
            },
            {
              "value": "+07:00 ~ (GMT+07:00) Bangkok",
              "label": "(GMT+07:00) Bangkok"
            },
            {
              "value": "+07:00 ~ (GMT+07:00) Hanoi",
              "label": "(GMT+07:00) Hanoi"
            },
            {
              "value": "+07:00 ~ (GMT+07:00) Jakarta",
              "label": "(GMT+07:00) Jakarta"
            },
            {
              "value": "+08:00 ~ (GMT+08:00) Krasnoyarsk",
              "label": "(GMT+08:00) Krasnoyarsk"
            },
            {
              "value": "+08:00 ~ (GMT+08:00) Beijing",
              "label": "(GMT+08:00) Beijing"
            },
            {
              "value": "+08:00 ~ (GMT+08:00) Chongqing",
              "label": "(GMT+08:00) Chongqing"
            },
            {
              "value": "+08:00 ~ (GMT+08:00) Hong Kong",
              "label": "(GMT+08:00) Hong Kong"
            },
            {
              "value": "+08:00 ~ (GMT+08:00) Urumqi",
              "label": "(GMT+08:00) Urumqi"
            },
            {
              "value": "+08:00 ~ (GMT+08:00) Kuala Lumpur",
              "label": "(GMT+08:00) Kuala Lumpur"
            },
            {
              "value": "+08:00 ~ (GMT+08:00) Singapore",
              "label": "(GMT+08:00) Singapore"
            },
            {
              "value": "+08:00 ~ (GMT+08:00) Taipei",
              "label": "(GMT+08:00) Taipei"
            },
            {
              "value": "+08:00 ~ (GMT+08:00) Perth",
              "label": "(GMT+08:00) Perth"
            },
            {
              "value": "+09:00 ~ (GMT+09:00) Irkutsk",
              "label": "(GMT+09:00) Irkutsk"
            },
            {
              "value": "+08:00 ~ (GMT+08:00) Ulaan Bataar",
              "label": "(GMT+08:00) Ulaan Bataar"
            },
            {
              "value": "+09:00 ~ (GMT+09:00) Seoul",
              "label": "(GMT+09:00) Seoul"
            },
            {
              "value": "+09:00 ~ (GMT+09:00) Osaka",
              "label": "(GMT+09:00) Osaka"
            },
            {
              "value": "+10:00 ~ (GMT+10:00) Yakutsk",
              "label": "(GMT+10:00) Yakutsk"
            },
            {
              "value": "+09:30 ~ (GMT+09:30) Darwin",
              "label": "(GMT+09:30) Darwin"
            },
            {
              "value": "+09:30 ~ (GMT+09:30) Adelaide",
              "label": "(GMT+09:30) Adelaide"
            },
            {
              "value": "+10:00 ~ (GMT+10:00) Canberra",
              "label": "(GMT+10:00) Canberra"
            },
            {
              "value": "+10:00 ~ (GMT+10:00) Melbourne",
              "label": "(GMT+10:00) Melbourne"
            },
            {
              "value": "+10:00 ~ (GMT+10:00) Sydney",
              "label": "(GMT+10:00) Sydney"
            },
            {
              "value": "+10:00 ~ (GMT+10:00) Brisbane",
              "label": "(GMT+10:00) Brisbane"
            },
            {
              "value": "+10:00 ~ (GMT+10:00) Hobart",
              "label": "(GMT+10:00) Hobart"
            },
            {
              "value": "+11:00 ~ (GMT+11:00) Vladivostok",
              "label": "(GMT+11:00) Vladivostok"
            },
            {
              "value": "+10:00 ~ (GMT+10:00) Guam",
              "label": "(GMT+10:00) Guam"
            },
            {
              "value": "+10:00 ~ (GMT+10:00) Port Moresby",
              "label": "(GMT+10:00) Port Moresby"
            },
            {
              "value": "+12:00 ~ (GMT+12:00) Magadan",
              "label": "(GMT+12:00) Magadan"
            },
            {
              "value": "+12:00 ~ (GMT+12:00) Solomon Is.",
              "label": "(GMT+12:00) Solomon Is."
            },
            {
              "value": "+12:00 ~ (GMT+12:00) Fiji",
              "label": "(GMT+12:00) Fiji"
            },
            {
              "value": "+12:00 ~ (GMT+12:00) Kamchatka",
              "label": "(GMT+12:00) Kamchatka"
            },
            {
              "value": "+12:00 ~ (GMT+12:00) Marshall Is.",
              "label": "(GMT+12:00) Marshall Is."
            },
            {
              "value": "+12:00 ~ (GMT+12:00) Auckland",
              "label": "(GMT+12:00) Auckland"
            },
            {
              "value": "+13:00 ~ (GMT+13:00) Nuku'alofa",
              "label": "(GMT+13:00) Nuku'alofa"
            },
            {
              "value": "+13:00 ~ (GMT+13:00) Tokelau Is.",
              "label": "(GMT+13:00) Tokelau Is."
            },
            {
              "value": "+13:00 ~ (GMT+13:00) Samoa",
              "label": "(GMT+13:00) Samoa"
            }
          ]
        },
        {
          "type": "header",
          "content": "⏱ Start"
        },
        {
          "type": "select",
          "id": "start_month",
          "label": "Month",
          "default": "January",
          "options": [
            {
              "value": "January",
              "label": "January"
            },
            {
              "value": "February",
              "label": "February"
            },
            {
              "value": "March",
              "label": "March"
            },
            {
              "value": "April",
              "label": "April"
            },
            {
              "value": "May",
              "label": "May"
            },
            {
              "value": "June",
              "label": "June"
            },
            {
              "value": "July",
              "label": "July"
            },
            {
              "value": "August",
              "label": "August"
            },
            {
              "value": "September",
              "label": "September"
            },
            {
              "value": "October",
              "label": "October"
            },
            {
              "value": "November",
              "label": "November"
            },
            {
              "value": "December",
              "label": "December"
            }
          ]
        },
        {
          "type": "range",
          "id": "start_day",
          "label": "Day",
          "min": 1,
          "max": 31,
          "step": 1,
          "default": 1
        },
        {
          "type": "text",
          "id": "start_year",
          "label": "Year",
          "default": "2021"
        },
        {
          "type": "select",
          "id": "start_time",
          "label": "Start time",
          "default": "23:30:00",
          "options": [
            {
              "value": "00:00:00",
              "label": "12:00 am (0:00)"
            },
            {
              "value": "00:30:00",
              "label": "12:30 am (0:30)"
            },
            {
              "value": "01:00:00",
              "label": "1:00 am (1:00)"
            },
            {
              "value": "01:30:00",
              "label": "1:30 am (1:30)"
            },
            {
              "value": "02:00:00",
              "label": "2:00 am (2:00)"
            },
            {
              "value": "02:30:00",
              "label": "2:30 am (2:30)"
            },
            {
              "value": "03:00:00",
              "label": "3:00 am (3:00)"
            },
            {
              "value": "03:30:00",
              "label": "3:30 am (3:30)"
            },
            {
              "value": "04:00:00",
              "label": "4:00 am (4:00)"
            },
            {
              "value": "04:30:00",
              "label": "4:30 am (4:30)"
            },
            {
              "value": "05:00:00",
              "label": "5:00 am (5:00)"
            },
            {
              "value": "05:30:00",
              "label": "5:30 am (5:30)"
            },
            {
              "value": "06:00:00",
              "label": "6:00 am (6:00)"
            },
            {
              "value": "06:30:00",
              "label": "6:30 am (6:30)"
            },
            {
              "value": "07:00:00",
              "label": "7:00 am (7:00)"
            },
            {
              "value": "07:30:00",
              "label": "7:30 am (7:30)"
            },
            {
              "value": "08:00:00",
              "label": "8:00 am (8:00)"
            },
            {
              "value": "08:30:00",
              "label": "8:30 am (8:30)"
            },
            {
              "value": "09:00:00",
              "label": "9:00 am (9:00)"
            },
            {
              "value": "09:30:00",
              "label": "9:30 am (9:30)"
            },
            {
              "value": "10:00:00",
              "label": "10:00 am (10:00)"
            },
            {
              "value": "10:30:00",
              "label": "10:30 am (10:30)"
            },
            {
              "value": "11:00:00",
              "label": "11:00 am (11:00)"
            },
            {
              "value": "11:30:00",
              "label": "11:30 am (11:30)"
            },
            {
              "value": "12:00:00",
              "label": "12:00 pm (12:00)"
            },
            {
              "value": "12:30:00",
              "label": "12:30 pm (12:30)"
            },
            {
              "value": "13:00:00",
              "label": "1:00 pm (13:00)"
            },
            {
              "value": "13:30:00",
              "label": "1:30 pm (13:30)"
            },
            {
              "value": "14:00:00",
              "label": "2:00 pm (14:00)"
            },
            {
              "value": "14:30:00",
              "label": "2:30 pm (14:30)"
            },
            {
              "value": "15:00:00",
              "label": "3:00 pm (15:00)"
            },
            {
              "value": "15:30:00",
              "label": "3:30 pm (15:30)"
            },
            {
              "value": "16:00:00",
              "label": "4:00 pm (16:00)"
            },
            {
              "value": "16:30:00",
              "label": "4:30 pm (16:30)"
            },
            {
              "value": "17:00:00",
              "label": "5:00 pm (17:00)"
            },
            {
              "value": "17:30:00",
              "label": "5:30 pm (17:30)"
            },
            {
              "value": "18:00:00",
              "label": "6:00 pm (18:00)"
            },
            {
              "value": "18:30:00",
              "label": "6:30 pm (18:30)"
            },
            {
              "value": "19:00:00",
              "label": "7:00 pm (19:00)"
            },
            {
              "value": "19:30:00",
              "label": "7:30 pm (19:30)"
            },
            {
              "value": "20:00:00",
              "label": "8:00 pm (20:00)"
            },
            {
              "value": "20:30:00",
              "label": "8:30 pm (20:30)"
            },
            {
              "value": "21:00:00",
              "label": "9:00 pm (21:00)"
            },
            {
              "value": "21:30:00",
              "label": "9:30 pm (21:30)"
            },
            {
              "value": "22:00:00",
              "label": "10:00 pm (22:00)"
            },
            {
              "value": "22:30:00",
              "label": "10:30 pm (22:30)"
            },
            {
              "value": "23:00:00",
              "label": "11:00 pm (23:00)"
            },
            {
              "value": "23:30:00",
              "label": "11:30 pm (23:30)"
            }
          ]
        },
        {
          "type": "header",
          "content": "🏁 End"
        },
        {
          "type": "select",
          "id": "end_month",
          "label": "Month",
          "default": "December",
          "options": [
            {
              "value": "January",
              "label": "January"
            },
            {
              "value": "February",
              "label": "February"
            },
            {
              "value": "March",
              "label": "March"
            },
            {
              "value": "April",
              "label": "April"
            },
            {
              "value": "May",
              "label": "May"
            },
            {
              "value": "June",
              "label": "June"
            },
            {
              "value": "July",
              "label": "July"
            },
            {
              "value": "August",
              "label": "August"
            },
            {
              "value": "September",
              "label": "September"
            },
            {
              "value": "October",
              "label": "October"
            },
            {
              "value": "November",
              "label": "November"
            },
            {
              "value": "December",
              "label": "December"
            }
          ]
        },
        {
          "type": "range",
          "id": "end_day",
          "label": "Day",
          "min": 1,
          "max": 31,
          "step": 1,
          "default": 1
        },
        {
          "type": "text",
          "id": "end_year",
          "label": "Year",
          "default": "2024"
        },
        {
          "type": "select",
          "id": "end_time",
          "label": "End time",
          "default": "23:30:00",
          "options": [
            {
              "value": "00:00:00",
              "label": "12:00 am (0:00)"
            },
            {
              "value": "00:30:00",
              "label": "12:30 am (0:30)"
            },
            {
              "value": "01:00:00",
              "label": "1:00 am (1:00)"
            },
            {
              "value": "01:30:00",
              "label": "1:30 am (1:30)"
            },
            {
              "value": "02:00:00",
              "label": "2:00 am (2:00)"
            },
            {
              "value": "02:30:00",
              "label": "2:30 am (2:30)"
            },
            {
              "value": "03:00:00",
              "label": "3:00 am (3:00)"
            },
            {
              "value": "03:30:00",
              "label": "3:30 am (3:30)"
            },
            {
              "value": "04:00:00",
              "label": "4:00 am (4:00)"
            },
            {
              "value": "04:30:00",
              "label": "4:30 am (4:30)"
            },
            {
              "value": "05:00:00",
              "label": "5:00 am (5:00)"
            },
            {
              "value": "05:30:00",
              "label": "5:30 am (5:30)"
            },
            {
              "value": "06:00:00",
              "label": "6:00 am (6:00)"
            },
            {
              "value": "06:30:00",
              "label": "6:30 am (6:30)"
            },
            {
              "value": "07:00:00",
              "label": "7:00 am (7:00)"
            },
            {
              "value": "07:30:00",
              "label": "7:30 am (7:30)"
            },
            {
              "value": "08:00:00",
              "label": "8:00 am (8:00)"
            },
            {
              "value": "08:30:00",
              "label": "8:30 am (8:30)"
            },
            {
              "value": "09:00:00",
              "label": "9:00 am (9:00)"
            },
            {
              "value": "09:30:00",
              "label": "9:30 am (9:30)"
            },
            {
              "value": "10:00:00",
              "label": "10:00 am (10:00)"
            },
            {
              "value": "10:30:00",
              "label": "10:30 am (10:30)"
            },
            {
              "value": "11:00:00",
              "label": "11:00 am (11:00)"
            },
            {
              "value": "11:30:00",
              "label": "11:30 am (11:30)"
            },
            {
              "value": "12:00:00",
              "label": "12:00 pm (12:00)"
            },
            {
              "value": "12:30:00",
              "label": "12:30 pm (12:30)"
            },
            {
              "value": "13:00:00",
              "label": "1:00 pm (13:00)"
            },
            {
              "value": "13:30:00",
              "label": "1:30 pm (13:30)"
            },
            {
              "value": "14:00:00",
              "label": "2:00 pm (14:00)"
            },
            {
              "value": "14:30:00",
              "label": "2:30 pm (14:30)"
            },
            {
              "value": "15:00:00",
              "label": "3:00 pm (15:00)"
            },
            {
              "value": "15:30:00",
              "label": "3:30 pm (15:30)"
            },
            {
              "value": "16:00:00",
              "label": "4:00 pm (16:00)"
            },
            {
              "value": "16:30:00",
              "label": "4:30 pm (16:30)"
            },
            {
              "value": "17:00:00",
              "label": "5:00 pm (17:00)"
            },
            {
              "value": "17:30:00",
              "label": "5:30 pm (17:30)"
            },
            {
              "value": "18:00:00",
              "label": "6:00 pm (18:00)"
            },
            {
              "value": "18:30:00",
              "label": "6:30 pm (18:30)"
            },
            {
              "value": "19:00:00",
              "label": "7:00 pm (19:00)"
            },
            {
              "value": "19:30:00",
              "label": "7:30 pm (19:30)"
            },
            {
              "value": "20:00:00",
              "label": "8:00 pm (20:00)"
            },
            {
              "value": "20:30:00",
              "label": "8:30 pm (20:30)"
            },
            {
              "value": "21:00:00",
              "label": "9:00 pm (21:00)"
            },
            {
              "value": "21:30:00",
              "label": "9:30 pm (21:30)"
            },
            {
              "value": "22:00:00",
              "label": "10:00 pm (22:00)"
            },
            {
              "value": "22:30:00",
              "label": "10:30 pm (22:30)"
            },
            {
              "value": "23:00:00",
              "label": "11:00 pm (23:00)"
            },
            {
              "value": "23:30:00",
              "label": "11:30 pm (23:30)"
            }
          ]
        }
      ]
    },
    {
      "type": "liquid",
      "name": "Liquid/HTML",
      "settings": [
        {
          "type": "paragraph",
          "content": "Copy and paste your custom code."
        },
        {
          "type": "liquid",
          "id": "liquid",
          "label": "Liquid and/or HTML"
        }
      ]
    },
    {
      "type": "@app"
    }
  ],
  "settings": [
    {
      "type": "image_picker",
      "id": "handle_image",
      "label": "Handle image (optional)"
    },
		{
      "type": "header",
      "content": "✏️ Text appearance"
    },
    {
      "type": "select",
      "id": "text_alignment",
      "label": "Text alignment",
      "default": "left",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "right",
          "label": "Right"
        },
        {
          "value": "justify",
          "label": "Justify"
        }
      ]
    },
    {
      "type": "range",
      "id": "text_size",
      "label": "Text size",
      "min": 80,
      "max": 150,
      "step": 5,
      "default": 90,
      "unit": "%"
    },
    {
      "type": "range",
      "id": "text_width",
      "label": "Text box width",
      "min": 30,
      "max": 70,
      "default": 50,
      "unit": "%"
    },
    {
      "type": "header",
      "content": "🎨 Design"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text",
      "default": "#283144"
    },
    {
      "type": "color_background",
      "id": "text_background_color",
      "label": "Text background",
      "default": "linear-gradient(0deg, rgba(255, 255, 255, 1), rgba(255, 255, 255, 1) 100%)"
    },
		{
      "type": "color",
      "id": "border_color",
      "label": "Border",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "drag_color",
      "label": "Handle icon",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "handle_color",
      "label": "Handle background",
      "default": "#121212"
    },
    {
      "type": "color",
      "id": "caption_text",
      "label": "Caption text",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "caption_background",
      "label": "Caption background",
      "default": "#121212"
    },
    {
      "type": "color_background",
      "id": "background_color",
      "label": "Background",
      "default": "linear-gradient(136deg, rgba(27, 33, 86, 1) 11%, rgba(84, 91, 143, 1) 84%)"
    },
		{
			"type": "color",
			"id": "button_label_color_product",
			"label": "Product button label",
			"default": "#222222"
		},
		{
			"type": "color",
			"id": "button_background_color_product",
			"label": "Product button background",
			"default": "#ffffff"
		},
    {
      "type": "checkbox",
      "id": "show_background_image",
      "label": "Show background image",
      "default": false
    },
    {
      "type": "image_picker",
      "id": "background_image",
      "label": "Background image"
    },
    {
      "type": "select",
      "id": "animation",
      "label": "Animation",
      "default": "none",
      "options": [
        {
          "value": "fade-in",
          "label": "Fade-in"
        },
        {
          "value": "fade-in-left",
          "label": "Fade-in left"
        },
        {
          "value": "fade-in-right",
          "label": "Fade-in right"
        },
        {
          "value": "fade-in-up",
          "label": "Fade-in up"
        },
        {
          "value": "fade-in-down",
          "label": "Fade-in down"
        },
        {
          "value": "none",
          "label": "None"
        }
      ]
    },
    {
      "type": "header",
      "content": "🖼 Layout"
    },
    {
      "type": "range",
      "id": "base_width",
      "label": "Size",
      "min": 60,
      "max": 100,
      "step": 5,
      "default": 100,
      "unit": "%"
    },
    {
      "type": "text",
      "id": "max_width",
      "label": "Maximum width",
      "placeholder": "eg. 1200px",
      "info": "Sets width constraint for content."
    },
    {
      "type": "range",
      "id": "inner_padding",
      "label": "Inner padding",
      "info": "Only applies to top and bottom.",
      "min": 0,
      "max": 100,
      "default": 60,
      "step": 5,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "outer_margin",
      "label": "Outer margin",
      "info": "Only applies to top and bottom.",
      "min": 0,
      "max": 100,
      "default": 0,
      "step": 5,
      "unit": "px"
    },
    {
      "type": "header",
      "content": "🚨 Advanced"
    },
    {
      "type": "liquid",
      "id": "custom_css",
      "label": "CSS"
    },
    {
      "type": "liquid",
      "id": "mobile_custom_css",
      "label": "Mobile CSS",
      "info": "Applied on screens less than 480px."
    },
    {
      "type": "text",
      "id": "anchor_id",
      "label": "Anchor name",
      "placeholder": "#design-pack-section",
      "info": "No spaces, only dashes. Jump to section from link on same page."
    },
    {
      "type": "checkbox",
      "id": "override_theme_font",
      "label": "Override default theme font",
      "default": false
    },
    {
      "type": "font_picker",
      "id": "heading_font",
      "label": "Heading",
      "default": "serif"
    },
    {
      "type": "font_picker",
      "id": "main_font",
      "label": "Text",
      "default": "sans-serif"
    }
  ],
  "presets": [
    {
      "name": "Comparison slider w text 🛍",
      "settings": {
      },
      "blocks": [
        {
          "type": "inset_image"
        },
        {
          "type": "small_text"
        },
        {
          "type": "heading"
        },
        {
          "type": "text"
        }
      ]
    }
  ],
  "locales": {
    "en": {
      "success": "Thanks for contacting us. We'll get back to you as soon as possible.",
      "days": "Days",
      "hours": "Hours",
      "minutes": "Minutes",
      "seconds": "Seconds"
    }
  }
}
{% endschema %}

{%- comment -%} JSON Settings {%- endcomment -%}
<script type="application/json" data-dsgn-pck="{{ section.id }}">
  {
    "id": {{ section.id | json }},
    "animation": {{ section.settings.animation | json }}
  }
</script>
{%- if slider_block.size > 0 and slider_count != 0 -%}
  <script data-dsgn-pck-external-js="{{ section.id }}" src="https://cdn.shopify.com/s/files/1/0577/7673/4361/files/flickity-2.3.0.pkgd.min.js?v=1671485005" defer></script>
  <script data-dsgn-pck-external-js="{{ section.id }}" src="https://cdn.shopify.com/s/files/1/0577/7673/4361/files/flickity-fade-1.0.0.min.js?v=1659560790" defer></script>
{%- endif -%}
{%- comment -%} JavaScript {%- endcomment -%}
<script data-dsgn-pck-js="{{ section.id }}" type="module" defer>
(function(){

  const designPack = {
    settings: {},
    animateSection: function(entries, observer){
      // Target the first entry available.
      let observedSection = entries[0];
      if (observedSection.isIntersecting) {
        observedSection.target.classList.add('dsgn-pck__animation-applied');
      }
    },
    enableSliderBlock: function(section){
      const sliderBlocks = section.querySelectorAll(`.dsgn-pck__slider-block`);

      sliderBlocks.forEach(elem => {
        designPack.flkty = new Flickity( elem, {
          cellAlign: 'left',
          contain: true,
          wrapAround: true,
          adaptiveHeight: true,
          imagesLoaded: true,
          prevNextButtons: JSON.parse(getComputedStyle(elem).getPropertyValue('--show-arrows')),
          autoPlay: JSON.parse(getComputedStyle(elem).getPropertyValue('--autoplay')),
          fade: JSON.parse(getComputedStyle(elem).getPropertyValue('--slider-animation')),
          pageDots: JSON.parse(getComputedStyle(elem).getPropertyValue('--page-dots')),
          draggable: JSON.parse(getComputedStyle(elem).getPropertyValue('--draggable')),
          freeScrollFriction: JSON.parse(getComputedStyle(elem).getPropertyValue('--free-scroll-friction')),
          selectedAttraction: JSON.parse(getComputedStyle(elem).getPropertyValue('--selected-attraction')),
          friction: JSON.parse(getComputedStyle(elem).getPropertyValue('--friction')),
          dragThreshold: JSON.parse(getComputedStyle(elem).getPropertyValue('--drag-threshold'))
        });
      });

    },
    initializeClock(selector, endtime, section) {
      function updateClock() {
        const t = designPack.getTimeRemaining(endtime);
        const daysSpan = clock.querySelector('.dsgn-pck__days .dsgn-pck__number');
        const hoursSpan = clock.querySelector('.dsgn-pck__hours .dsgn-pck__number');
        const minutesSpan = clock.querySelector('.dsgn-pck__minutes .dsgn-pck__number');
        const secondsSpan = clock.querySelector('.dsgn-pck__seconds .dsgn-pck__number');

        if (daysSpan.innerHTML != t.days){
          daysSpan.innerHTML = t.days;
        }
        if (hoursSpan.innerHTML != t.hours){
          hoursSpan.innerHTML = ('0' + t.hours).slice(-2);
        }
        if (minutesSpan.innerHTML != t.minutes){
          minutesSpan.innerHTML = ('0' + t.minutes).slice(-2);
        }
        if (secondsSpan.innerHTML != t.seconds){
          secondsSpan.innerHTML = ('0' + t.seconds).slice(-2);
        }

        if (t.total <= 0) {
          clearInterval(timeinterval);
        }
      }

      const clock = section.querySelector(selector);
      updateClock();
      const timeinterval = setInterval(updateClock, 1000);
    },
    getTimeRemaining(endtime){
      const total = Date.parse(endtime) - Date.parse(new Date());
      const seconds = Math.floor( (total/1000) % 60 );
      const minutes = Math.floor( (total/1000/60) % 60 );
      const hours = Math.floor( (total/(1000*60*60)) % 24 );
      const days = Math.floor( total/(1000*60*60*24) );

      return {
        total,
        days,
        hours,
        minutes,
        seconds
      };
    },
    enableCountdownTimer: function(section){
      const clock = '.dsgn-pck__clock';
      const startDate = section.querySelector('[data-timer-start]').dataset.timerStart;
      const endDate = section.querySelector('[data-timer-end]').dataset.timerEnd;

      const startMs = Date.parse(startDate);
      const endMs = Date.parse(endDate);
      const currentMs = Date.parse(new Date());

      if (endMs > currentMs && currentMs >= startMs ) {
        designPack.initializeClock(clock, endDate, section);
      } else {
        section.querySelector(`.dsgn-pck__clock-wrap`).style.display = 'none';
      }
    },
		setProductImage(id, section){
			const productImages = section.querySelectorAll('.dsgn-pck__feature-product');
			productImages.forEach((image) => {
				if(image.dataset.imageProductId == id) {
					image.classList.add('dsgn-pck__active');
				} else {
				 image.classList.remove('dsgn-pck__active');
				}
			})
		},
		setProductDescription(id, section) {
			const productDescriptions = section.querySelectorAll('.dsgn-pck__product-description');
			productDescriptions.forEach((description) => {
				if(description.dataset.descriptionProductId == id) {
					description.classList.add('dsgn-pck__active');
				} else {
				 description.classList.remove('dsgn-pck__active');
				}
			})
		},
		setProductCompare(id, section) {
			const productCompares = section.querySelectorAll('.dsgn-pck__compare');
			productCompares.forEach((compare) => {
				if(compare.dataset.compareProductId == id) {
					compare.classList.add('dsgn-pck__active');
				} else {
				 compare.classList.remove('dsgn-pck__active');
				}
			})
		},
		handleCompare(blockId, section) {
			let isClicked = false;

			const block = document.getElementById(blockId);

			
      const image = block.querySelector('.dsgn-pck__comparison__overlay');
      const slider = block.querySelector('.dsgn-pck__comparison__slider');
      const fullImage = block.querySelector('.dsgn-pck__compare');
			
			console.log('👀👀👀', slider);
			
			if(slider){
				const width = block.offsetWidth;
				const height = block.offsetHeight;
	
				function compare() {
	
					slider.style.top = height / 2 - slider.offsetHeight / 2 + 'px';
					slider.style.left = width / 2 - slider.offsetWidth / 2 + 'px';
					image.style.width = '50%';
	
					slider.addEventListener('mousedown', onSlideStart);
					slider.addEventListener('touchstart', onSlideStart);
	
					section.addEventListener('mouseup', () => (isClicked = false));
					section.addEventListener('touchstop', () => (isClicked = false));
	
					section.addEventListener('mousemove', onSlideMove);
					section.addEventListener('touchmove', onSlideMove);
				}
	
				function onSlideStart(event) {
					event.preventDefault();
					console.log("SLIDE start🌈", event.target, isClicked)
					isClicked = true;
					console.log("CLCI", isClicked);
				}
	
				function onSlideMove(event) {
					if (!isClicked) return;
	
					doSlide(currentPosition(event));
				}
	
				function currentPosition(event = window.event) {
					let pageX = event.pageX;
					let hasTouchScreen = null;
	
					if ("maxTouchPoints" in navigator && /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
						hasTouchScreen = navigator.maxTouchPoints > 0;
					}
	
					if (typeof hasTouchScreen != 'undefined' && hasTouchScreen != null) {
						pageX = event.changedTouches[0].pageX
					}
	
					let xImage = image.getBoundingClientRect();
					let x = 0;
	
					x = pageX - xImage.left;
	
					if (x < 0) x = 0;
	
					if (x > width) x = width;
	
					return x;
				}
	
				function doSlide(x) {
					image.style.width = x + 'px';
					slider.style.left = image.offsetWidth - slider.offsetWidth / 2 + 'px';
				}
	
				compare();
			
			}
		},
    load: function(section){
			
			const comparisonBlocks = section.querySelectorAll('.dsgn-pck__compare ');

			comparisonBlocks.forEach((compare) => {
				console.log("🧱🧱🧱", compare, compare.id)
				const blockId = compare.id
				designPack.handleCompare(blockId, section)
			})

      if (this.settings.animation !== 'none'){
        const options = {
          root: null,
          rootMargin: '0px',
          threshold: [0, 0.25, 0.5, 0.75, 1]
        };
        // Construct Intersection Observer.
        const observer = new IntersectionObserver( this.animateSection, options );
        // Observe if element is present.
        if (section) {
          observer.observe(section);
        }
      }

      const countdownTimer = section.querySelector('.dsgn-pck__clock');
      if (typeof countdownTimer !== 'undefined' && countdownTimer !== null){
        designPack.enableCountdownTimer(section);
      }

      const sliderBlock = section.querySelector('.dsgn-pck__slider-block');
      if (typeof sliderBlock !== 'undefined' && sliderBlock !== null){
        designPack.enableSliderBlock(section);
      }

			const featuredProducts = section.querySelectorAll('[data-button-product-id]');
			console.log("🎒🙌🎉", featuredProducts);

			featuredProducts.forEach((product) => {
				console.log("🍐🍎", product.dataset.buttonProductId);
				product.addEventListener("click", (e) => {
          // add/remove active class on the container element
					featuredProducts.forEach((product) => {
						if(e.target.dataset.buttonProductId == product.dataset.buttonProductId) {
							product.classList.add("dsgn-pck__active");
						} else {
							product.classList.remove('dsgn-pck__active');
						}
					})
					designPack.setProductImage(product.dataset.buttonProductId, section);
					designPack.setProductDescription(product.dataset.buttonProductId, section);
					designPack.setProductCompare(product.dataset.buttonProductId, section);
        });
      });
    },
    unload: function(section){
      section.classList.remove('dsgn-pck__animation-applied')
    }
  }

  window.addEventListener('shopify:section:unload', function (e) {
    const settings = document.querySelector(`[data-dsgn-pck="${e.detail.sectionId}"]`);
    const sectionId = e.detail.sectionId;
    const section = document.querySelector(`#DP--${e.detail.sectionId}`);
    if (sectionId == designPack.settings.id){
      designPack.unload(section);
    }
  });

  designPack.settings = JSON.parse(document.querySelector('[data-dsgn-pck="{{ section.id }}"]').innerHTML);
  const sectionId = {{ section.id | json }};
  const section = document.querySelector(`#DP--${sectionId}`);

  if (sectionId == designPack.settings.id){
    designPack.load(section);
  }
})()
</script>
